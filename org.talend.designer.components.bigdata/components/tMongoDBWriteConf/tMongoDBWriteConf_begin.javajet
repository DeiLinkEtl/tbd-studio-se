<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
		java.util.Map
	   	org.talend.core.model.process.IConnection    
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.utils.NodeUtil
	" 
%>

	<% 
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
  	String cid = node.getUniqueName();

    String dbhost   = ElementParameterParser.getValue(node, "__HOST__");
    String dbname   = ElementParameterParser.getValue(node, "__DATABASE__");
    boolean authentication="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__REQUIRED_AUTHENTICATION__"));
    String dbuser   = ElementParameterParser.getValue(node, "__USERNAME__");
    String dbpass   = ElementParameterParser.getValue(node, "__PASSWORD__");
    String dbport  	= ElementParameterParser.getValue(node, "__PORT__");
    String collection=ElementParameterParser.getValue(node, "__COLLECTION__");
    boolean dropExistCollection="true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__DROP_COLLECTION_CREATE__"));
    boolean useExistingConnection = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
    boolean useReplicaSet="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__USE_REPLICA_SET__"));
    boolean removeRoot="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__REMOVE_ROOT__"));
	%>
	int nb_line_<%=cid %> = 0;
	<%
    List<IMetadataTable> metadatas = node.getMetadataList();
  	if(metadatas != null && metadatas.size() > 0){
      	IMetadataTable metadata = metadatas.get(0);
      	if(metadata != null){
		%>
			com.mongodb.Mongo mongo_<%=cid%>=null;
			com.mongodb.DB db_<%=cid%> =null;
			String readFinishMarkWithPipeId_<%=cid%> = "<%=cid%>_FINISH";
			<%
      		if (useExistingConnection){
      			String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
				%>
				mongo_<%=cid%>=(com.mongodb.Mongo)globalMap.get("mongo_<%=connection%>");
				db_<%=cid%> = (com.mongodb.DB) globalMap.get("db_<%=connection%>");
			<%
			}else{
			%>
				try{
				<%
	 			List<Map<String,String>> replicaAddrs= (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__REPLICA_SET__");
	   			if(useReplicaSet){
				%>
					List<com.mongodb.ServerAddress> addrs_<%=cid%> = new java.util.ArrayList<com.mongodb.ServerAddress>();
					<%
					for(Map<String,String> replicaAddr:replicaAddrs){
					%>
						addrs_<%=cid%>.add(new com.mongodb.ServerAddress(<%=replicaAddr.get("REPLICA_HOST")%>,<%=replicaAddr.get("REPLICA_PORT")%>));
					<%
					}
					%>
					mongo_<%=cid%> = new com.mongodb.Mongo(addrs_<%=cid%>);
				<%
				}else{
				%>
					mongo_<%=cid%> = new com.mongodb.Mongo(<%=dbhost%>, <%=dbport%>);
				<%
				}
				%>
				db_<%=cid%> = mongo_<%=cid%>.getDB(<%=dbname%>);
				<%
				if (authentication){
				%>
    				db_<%=cid%>.authenticate(<%=dbuser%>, <%=dbpass%>.toCharArray());
				<%
				}
			}
			if(dropExistCollection){
			%>
				if(db_<%=cid%>.collectionExists(<%=collection%>)){
					db_<%=cid%>.getCollection(<%=collection%>).drop();
				}
			<%
			}
			%>
			com.mongodb.DBCollection coll_<%=cid%> = db_<%=cid%>.getCollection(<%=collection%>);
				
			net.sf.json.xml.XMLSerializer xmlSerializer_<%=cid%> = new net.sf.json.xml.XMLSerializer(); 
		    xmlSerializer_<%=cid%>.clearNamespaces();
		    xmlSerializer_<%=cid%>.setSkipNamespaces(true);
		    xmlSerializer_<%=cid%>.setForceTopLevelObject(<%=(removeRoot?false:true)%>);
		    <%
		    INode sourceNode = node.getIncomingConnections(EConnectionType.ON_COMPONENT_OK).get(0).getSource();
			String virtualSourceCid = sourceNode.getUniqueName();
			INode startNode = NodeUtil.getSpecificStartNode(sourceNode);
			String startNodeCid = null; 
			if(startNode != null){
				startNodeCid = startNode.getUniqueName();
			} 
			IConnection nextMergeConn = NodeUtil.getNextMergeConnection(node);
			if(nextMergeConn != null && nextMergeConn.getInputId()>1 && startNodeCid != null){
			%>
				java.util.Queue<String> queue_<%=cid%> = new java.util.concurrent.ConcurrentLinkedQueue<String>();
				
				class ThreadXMLField_<%=cid%> extends Thread {
					java.util.Queue<String> queue;
					java.util.List<java.util.Map<String,String>> flows;
					java.lang.Exception lastException;
					String currentComponent;
					
					ThreadXMLField_<%=cid%>(java.util.Queue q) {
						this.queue = q;
						globalMap.put("queue_<%=virtualSourceCid%>", queue);
						lastException = null;
					}
					
					ThreadXMLField_<%=cid%>(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
						this.queue = q;
						this.flows = l;
						lastException = null;
						globalMap.put("queue_<%=virtualSourceCid%>", queue);
						globalMap.put("flows_<%=virtualSourceCid%>", flows);
					}
					
					public java.lang.Exception getLastException() {
						return this.lastException;
					}
					public String getCurrentComponent() {
						return this.currentComponent;
					}
				
					@Override
					public void run() {
						try {
							<%=startNodeCid%>Process(globalMap);
						} catch (TalendException te) {
							this.lastException = te.getException();
							this.currentComponent = te.getCurrentComponent();
							globalMap.put("<%=cid%>_FINISH" + (this.queue==null?"":this.queue.hashCode()), "true");
						}
					}
				}
				
				ThreadXMLField_<%=cid%> txf_<%=cid%> = new ThreadXMLField_<%=cid%>(queue_<%=cid%>);
				txf_<%=cid%>.start();
			<%
			}else{
			%>
				java.util.Queue<String> queue_<%=cid%> = (java.util.Queue<String>) globalMap.get("queue_<%=cid%>");
			<%
			}
		    %>
			readFinishMarkWithPipeId_<%=cid%> = "<%=cid%>_FINISH"+(queue_<%=cid%>==null?"":queue_<%=cid%>.hashCode());
			String str_<%=cid %> = null;
			
			while(true) {
				if (!queue_<%=cid%>.isEmpty()) {
					str_<%=cid %> = queue_<%=cid %>.poll();
					//Convert XML to JSON
			        net.sf.json.JSON json_<%=cid%> = xmlSerializer_<%=cid%>.read(str_<%=cid %>);
					nb_line_<%=cid%>++;
		<%
    	}
    }
	%>