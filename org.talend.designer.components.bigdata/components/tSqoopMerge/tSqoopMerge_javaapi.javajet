<%
	String distribution = ElementParameterParser.getValue(node, "__DISTRIBUTION__");
	boolean isCustom = "CUSTOM".equals(distribution);
	String version = ElementParameterParser.getValue(node, "__DB_VERSION__");
	
	List<Map<String, String>> hadoopProps = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__HADOOP_ADVANCED_PROPERTIES__");
	
	String namenode = ElementParameterParser.getValue(node, "__FS_DEFAULT_NAME__");
	String jobtracker = ElementParameterParser.getValue(node, "__MAPRED_JOB_TRACKER__");
	boolean useKrb = "true".equals(ElementParameterParser.getValue(node, "__USE_KRB__"));
	List<Map<String,String>> additionalList = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node,"__ADDITIONAL_JAVA__");
	List<Map<String,String>> generateJarAdditionalList = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node,"__GENERATE_JAR_ADDITIONAL_JAVA__");
	boolean printLog = "true".equals(ElementParameterParser.getValue(node,"__PRINT_LOG__"));
	boolean verbose = "true".equals(ElementParameterParser.getValue(node,"__VERBOSE__"));
	String newDataDir = ElementParameterParser.getValue(node,"__NEWDATA__");
	String oldDataDir = ElementParameterParser.getValue(node,"__ONTO__");
	String targetDir = ElementParameterParser.getValue(node,"__TARGETDIR__");
	String jarFile = ElementParameterParser.getValue(node,"__JARFILE__");
	boolean customClassName = "true".equals(ElementParameterParser.getValue(node,"__CUSTOMCLASSNAME__"));
	String className = ElementParameterParser.getValue(node,"__CLASSNAME__");
	String key = ElementParameterParser.getValue(node,"__MERGEKEY__");
	boolean needGenerateJar = "true".equals(ElementParameterParser.getValue(node,"__GENERATE__"));
	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	String table = ElementParameterParser.getValue(node,"__TABLE__");
	String username = ElementParameterParser.getValue(node,"__USERNAME__");
	String password = ElementParameterParser.getValue(node,"__PASSWORD__");
    
	String fsDefalutName = "fs.default.name";
	
	boolean useYarn = "true".equals(ElementParameterParser.getValue(node, "__USE_YARN__"));
	String resourceManager = ElementParameterParser.getValue(node, "__RESOURCE_MANAGER__");
	
	String yarnClasspathSeparator = ElementParameterParser.getValue(node, "__CLASSPATH_SEPARATOR__");
%>
	globalMap.put("current_client_path_separator", System.getProperty("path.separator"));
	System.setProperty("path.separator", <%=yarnClasspathSeparator%>);
	
	org.apache.hadoop.conf.Configuration configuration_<%=cid%> = new org.apache.hadoop.conf.Configuration();
    org.apache.hadoop.fs.FileSystem fs_<%=cid%> = org.apache.hadoop.fs.FileSystem.get(configuration_<%=cid%>);
	configuration_<%=cid%>.set("<%=fsDefalutName%>", <%=namenode%>);
<%
	if((isCustom && useYarn) || (!isCustom && ("PIVOTAL_HD_1_0_1".equals(version) || "HDP_2_0".equals(version) || "Cloudera_CDH4_YARN".equals(version)))) {
%>
		configuration_<%=cid%>.set("mapreduce.framework.name", "yarn");
		configuration_<%=cid%>.set("yarn.resourcemanager.address", <%=resourceManager%>);
<%
		boolean setSchedulerAddress = "true".equals(ElementParameterParser.getValue(node, "__SET_SCHEDULER_ADDRESS__"));
		if(setSchedulerAddress) {
			String schedulerAddress = ElementParameterParser.getValue(node,"__RESOURCEMANAGER_SCHEDULER_ADDRESS__");
%>
			configuration_<%=cid%>.set("yarn.resourcemanager.scheduler.address", <%=schedulerAddress%>);
<%
		}
%>
		//set default yarn classpath with environment variable
		configuration_<%=cid%>.set("yarn.application.classpath","$HADOOP_CONF_DIR,$HADOOP_COMMON_HOME/*,$HADOOP_COMMON_HOME/lib/*,$HADOOP_HDFS_HOME/*,$HADOOP_HDFS_HOME/lib/*,$HADOOP_MAPRED_HOME/*,$HADOOP_MAPRED_HOME/lib/*,$YARN_HOME/*,$YARN_HOME/lib/*,$HADOOP_YARN_HOME/*,$HADOOP_YARN_HOME/lib/*,$HADOOP_COMMON_HOME/share/hadoop/common/*,$HADOOP_COMMON_HOME/share/hadoop/common/lib/*,$HADOOP_HDFS_HOME/share/hadoop/hdfs/*,$HADOOP_HDFS_HOME/share/hadoop/hdfs/lib/*,$HADOOP_YARN_HOME/share/hadoop/yarn/*,$HADOOP_YARN_HOME/share/hadoop/yarn/lib/*");
<%
		boolean setMemory = "true".equals(ElementParameterParser.getValue(node, "__SET_MEMORY__"));
		if(setMemory) {
			String mapMemory = ElementParameterParser.getValue(node,"__MAPREDUCE_MAP_MEMORY_MB__");
			String reduceMemory = ElementParameterParser.getValue(node,"__MAPREDUCE_REDUCE_MEMORY_MB__");
			String amMemory = ElementParameterParser.getValue(node,"__YARN_APP_MAPREDUCE_AM_RESOURCE_MB__");
%>
			configuration_<%=cid%>.set("mapreduce.map.memory.mb", <%=mapMemory%>);
			configuration_<%=cid%>.set("mapreduce.reduce.memory.mb", <%=reduceMemory%>);
			configuration_<%=cid%>.set("yarn.app.mapreduce.am.resource.mb", <%=amMemory%>);
<%
		}
	} else {
%>
		configuration_<%=cid%>.set("mapred.job.tracker", <%=jobtracker%>);
<%
	}
    if(!isCustom && ("HDP_1_2".equals(version) || "HDP_1_3".equals(version))) {
    	String mapMemory = ElementParameterParser.getValue(node,"__MAPRED_JOB_MAP_MEMORY_MB__");
	    String reduceMemory = ElementParameterParser.getValue(node,"__MAPRED_JOB_REDUCE_MEMORY_MB__");
%>
        configuration_<%=cid%>.set("mapred.job.map.memory.mb", <%=mapMemory%>);
        configuration_<%=cid%>.set("mapred.job.reduce.memory.mb", <%=reduceMemory%>);
<%
    }
%>
	String jarFileName_<%=cid%> = <%=jarFile%>;
<%
	if(hadoopProps!=null && hadoopProps.size() > 0){
		for(Map<String, String> item : hadoopProps){
%>
			configuration_<%=cid%>.set(<%=item.get("PROPERTY") %> ,<%=item.get("VALUE") %>);
<% 
		}
	}
	if(("HDP_1_0".equals(version) || "HDP_1_2".equals(version) || "HDP_1_3".equals(version) || "Cloudera_CDH4".equals(version) || isCustom) && useKrb) {
		String namenodePrincipal = ElementParameterParser.getValue(node, "__NAMENODE_PRINCIPAL__");
		String jobTrackerPrincipal = ElementParameterParser.getValue(node, "__JOBTRACKER_PRINCIPAL__");
		boolean useKeytab = "true".equals(ElementParameterParser.getValue(node, "__USE_KEYTAB__"));
		String userPrincipal = ElementParameterParser.getValue(node, "__PRINCIPAL__");
		String keytabPath = ElementParameterParser.getValue(node, "__KEYTAB_PATH__");
%>
		configuration_<%=cid%>.set("dfs.namenode.kerberos.principal", <%=namenodePrincipal%>);
		configuration_<%=cid%>.set("mapreduce.jobtracker.kerberos.principal", <%=jobTrackerPrincipal%>);
<%
		if(useKeytab) {
%>
			org.apache.hadoop.security.UserGroupInformation.loginUserFromKeytab(<%=userPrincipal%>, <%=keytabPath%>);
<%
		}
	}

    if(needGenerateJar){
%>
        com.cloudera.sqoop.SqoopOptions needGenereateJarSqoopOptions_<%=cid%> = new com.cloudera.sqoop.SqoopOptions(configuration_<%=cid%>);
        needGenereateJarSqoopOptions_<%=cid%>.setConnectString(<%=connection%>); // __CONNECTION__
        needGenereateJarSqoopOptions_<%=cid%>.setUsername(<%=username%>);
        needGenereateJarSqoopOptions_<%=cid%>.setPassword(<%=password%>);
        needGenereateJarSqoopOptions_<%=cid%>.setTableName(<%=table%>);
        <%if(customClassName){%>
            needGenereateJarSqoopOptions_<%=cid%>.setClassName(<%=className%>);
        <%}else{%>
            needGenereateJarSqoopOptions_<%=cid%>.setClassName("SqoopMerge_<%=cid%>");
        <%}%>

        java.util.Properties generateJarAdditionalProperties_<%=cid%> = new java.util.Properties();
<%
        if(generateJarAdditionalList != null){ 
            for(Map<String,String> generateJarAdditionalMap : generateJarAdditionalList){
                if(generateJarAdditionalMap.get("GENERATE_JAR_ADDITIONAL_VALUE")==null || "".equals(generateJarAdditionalMap.get("GENERATE_JAR_ADDITIONAL_VALUE"))) { 
                    break; 
                }
                if(generateJarAdditionalMap.get("GENERATE_JAR_ADDITIONAL_ARGUMENT").contains("delimiters")) {
                
%> 
                    generateJarAdditionalProperties_<%=cid%>.put(<%=generateJarAdditionalMap.get("GENERATE_JAR_ADDITIONAL_ARGUMENT")%>, ""+<%=generateJarAdditionalMap.get("GENERATE_JAR_ADDITIONAL_VALUE")%>.codePointAt(0)); 
<%
                } else {
%> 
                    generateJarAdditionalProperties_<%=cid%>.put(<%=generateJarAdditionalMap.get("GENERATE_JAR_ADDITIONAL_ARGUMENT")%>, <%=generateJarAdditionalMap.get("GENERATE_JAR_ADDITIONAL_VALUE")%>); 
<%
                }
            } 
        } 
%>
        needGenereateJarSqoopOptions_<%=cid%>.loadProperties(generateJarAdditionalProperties_<%=cid%>);
        
        com.cloudera.sqoop.tool.CodeGenTool codeGen_<%=cid%> = new com.cloudera.sqoop.tool.CodeGenTool();
        com.cloudera.sqoop.Sqoop codeGenerator_<%=cid%> = new com.cloudera.sqoop.Sqoop(codeGen_<%=cid%>,configuration_<%=cid%>, needGenereateJarSqoopOptions_<%=cid%>);
        int ret_<%=cid%> = com.cloudera.sqoop.Sqoop.runSqoop(codeGenerator_<%=cid%>, new String[0]);
        if (0 != ret_<%=cid%>) {
            throw new Exception("codegen the jar failed with code:" + ret_<%=cid%>);
        }
        List<String> jars_<%=cid%> = codeGen_<%=cid%>.getGeneratedJarFiles();
        jarFileName_<%=cid%> = jars_<%=cid%>.get(0);
<%
    }
%>

    java.net.URLClassLoader sysloader_<%=cid%> = (java.net.URLClassLoader) ClassLoader.getSystemClassLoader();
    java.lang.reflect.Method method_<%=cid%> = java.net.URLClassLoader.class.getDeclaredMethod("addURL", new Class[] { java.net.URL.class});
    method_<%=cid%>.setAccessible(true);
    method_<%=cid%>.invoke(sysloader_<%=cid%>, new Object[] { new java.io.File(jarFileName_<%=cid%>).toURL()});
    
    com.cloudera.sqoop.tool.SqoopTool sqoopTool_<%=cid%> = com.cloudera.sqoop.tool.SqoopTool.getTool("merge");

    com.cloudera.sqoop.SqoopOptions sqoopOptions_<%=cid%> = new com.cloudera.sqoop.SqoopOptions(configuration_<%=cid%>);

	sqoopOptions_<%=cid%>.setMergeOldPath(<%=oldDataDir%>);
	sqoopOptions_<%=cid%>.setMergeNewPath(<%=newDataDir%>);
	sqoopOptions_<%=cid%>.setMergeKeyCol(<%=key%>);
	sqoopOptions_<%=cid%>.setTargetDir(<%=targetDir%>); 
    <%if(customClassName){%>
		sqoopOptions_<%=cid%>.setClassName(<%=className%>);
    <%}else{%>
		sqoopOptions_<%=cid%>.setClassName("SqoopMerge_<%=cid%>");
    <%}%>
		
<%	
	if(!(("HDP_1_0".equals(version) || "Cloudera_CDH3".equals(version) || "MAPR1".equals(version)) && !isCustom)) {
		if(printLog && verbose){
%>
			sqoopOptions_<%=cid%>.setVerbose(true);
<%
		}
	}
%>
<%
	if(("Cloudera_CDH3".equals(version) || "MAPR1".equals(version)) && !isCustom) {
%>
		com.cloudera.sqoop.Sqoop sqoop_<%=cid%> = new com.cloudera.sqoop.Sqoop(sqoopTool_<%=cid%>, configuration_<%=cid%>, sqoopOptions_<%=cid%>);
<%
	} else {
%>
		org.apache.sqoop.Sqoop sqoop_<%=cid%> = new org.apache.sqoop.Sqoop(sqoopTool_<%=cid%>, configuration_<%=cid%>, sqoopOptions_<%=cid%>);
<%
	}
%>
	int result_<%=cid%> = sqoop_<%=cid%>.run(null);
	if(result_<%=cid%> != 0) {
		throw new Exception("The Sqoop merge job has failed");
	}
	
    String currentClientPathSeparator_<%=cid%> = (String)globalMap.get("current_client_path_separator");
    if(currentClientPathSeparator_<%=cid%>!=null) {
    	System.setProperty("path.separator", currentClientPathSeparator_<%=cid%>);
    	globalMap.put("current_client_path_separator", null);
    }