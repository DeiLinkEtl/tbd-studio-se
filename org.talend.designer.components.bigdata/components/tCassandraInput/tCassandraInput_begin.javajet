<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		org.talend.core.model.process.IConnectionCategory
		java.util.List 
		java.util.Map
	" 
%>
<% 
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    
	String host = ElementParameterParser.getValue(node,"__HOST__");
    String port = ElementParameterParser.getValue(node,"__PORT__");
    //String cluster= ElementParameterParser.getValue(node, "__CLUSTER__");
    String userName = ElementParameterParser.getValue(node, "__USERNAME__");
    String passWord = ElementParameterParser.getValue(node, "__PASSWORD__");
	String keySpace = ElementParameterParser.getValue(node,"__KEY_SPACE__");
	boolean authentication="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__REQUIRED_AUTHENTICATION__"));
    boolean useExistingConnection = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
    String columnFamily = ElementParameterParser.getValue(node,"__COLUMN_FAMILY__");
    String keyColumn = ElementParameterParser.getValue(node,"__KEY_COLUMN__");
    boolean incKey = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__INC_KEY__"));
    String superKeyColumn = ElementParameterParser.getValue(node,"__SUPER_KEY_COLUMN__");
    boolean incSuperKey = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__INC_SUPER_KEY__"));
    String rowKeys=ElementParameterParser.getValue(node,"__ROW_KEYS__");
    String searchColumns=ElementParameterParser.getValue(node,"__COLUMNS__");
 	String keyStart = ElementParameterParser.getValue(node,"__KEY_START__");
 	String keyEnd = ElementParameterParser.getValue(node,"__KEY_END__");
 	String keyLimit= ElementParameterParser.getValue(node,"__KEY_LIMIT__");
 	String columnStart = ElementParameterParser.getValue(node,"__COLUMN_START__");
 	String columnEnd = ElementParameterParser.getValue(node,"__COLUMN_END__");
 	String columnLimit = ElementParameterParser.getValue(node,"__COLUMN_LIMIT__");
 	
 	boolean isSpecifyKeys = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__SPECIFY_KEYS__"));
 	boolean isSpecifyColumns = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__SPECIFY_COLUMNS__"));
 	
 	String columnFamilyType = ElementParameterParser.getValue(node,"__COLUMN_FAMILY_TYPE__");
 	String rowKeyType = ElementParameterParser.getValue(node,"__ROW_KEY_TYPE__");
 	String sNameType = ElementParameterParser.getValue(node,"__SUPER_COLUMN_TYPE__");
    
    List<IMetadataTable> metadatas = node.getMetadataList();
  	List<IMetadataColumn> columnList = null;
  	List<? extends IConnection> outputs = node.getOutgoingSortedConnections();
  	String firstConnName = "";
%>
		int nb_line_<%=cid %> = 0;
<%
  	if(metadatas != null && metadatas.size() > 0){
      	IMetadataTable metadata = metadatas.get(0);
      	columnList = metadata.getListColumns();
		int sizeColumns = columnList.size();
      	if(metadata != null){
     		Map<String,String> typeMap=new java.util.HashMap<String,String>();
			typeMap.put("Boolean","BooleanSerializer");
			typeMap.put("byte[]","BytesArraySerializer");
			typeMap.put("java.util.Date","DateSerializer");
			typeMap.put("Double","DoubleSerializer");
			typeMap.put("Float","FloatSerializer");
			typeMap.put("Integer","IntegerSerializer");
			typeMap.put("Long","LongSerializer");
			typeMap.put("Object","ObjectSerializer");
			typeMap.put("Short","ShortSerializer");
			typeMap.put("String","StringSerializer");
			typeMap.put("Character","CharSerializer");

%>
			me.prettyprint.hector.api.Serializer keySerializer_<%=cid%> =me.prettyprint.cassandra.serializers.<%=typeMap.get(rowKeyType)==null?"ObjectSerializer":typeMap.get(rowKeyType)%>.get();
<%
			if("SUPER".equals(columnFamilyType)){
%>
			me.prettyprint.hector.api.Serializer sNameSerializer_<%=cid%> =me.prettyprint.cassandra.serializers.<%=typeMap.get(sNameType)==null?"ObjectSerializer":typeMap.get(sNameType)%>.get();
<%
			}
%>
		me.prettyprint.hector.api.Cluster cluster_<%=cid%> =null;
		me.prettyprint.hector.api.Keyspace keyspace_<%=cid%> =null;
<%
			if (useExistingConnection){
      			String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
%>
		cluster_<%=cid%>=(me.prettyprint.hector.api.Cluster)globalMap.get("cluster_<%=connection%>");
<%
			}else{
%>
		try{
		    String hostIps_<%=cid%>=<%=host%>+":"+<%=port%>;
		    me.prettyprint.cassandra.service.CassandraHostConfigurator hosts_<%=cid%> = new me.prettyprint.cassandra.service.CassandraHostConfigurator(hostIps_<%=cid%>);
		    java.util.Map<String, String> credentials_<%=cid%> = new java.util.HashMap<String, String>();
<%
				if (authentication){
%>
		    credentials_<%=cid%>.put("username",<%=userName%>);
		    credentials_<%=cid%>.put("password",<%=passWord%>);
<%
				}
%>
	   	 	cluster_<%=cid%> = me.prettyprint.hector.api.factory.HFactory.getOrCreateCluster("cluster_<%=cid%>_"+pid,hosts_<%=cid%>,credentials_<%=cid%>);
<%
			}
%>
			me.prettyprint.cassandra.model.ConfigurableConsistencyLevel clpolicy_<%=cid%> = new me.prettyprint.cassandra.model.ConfigurableConsistencyLevel();
			me.prettyprint.hector.api.HConsistencyLevel consistencyLevel_<%=cid%> = me.prettyprint.hector.api.HConsistencyLevel.ONE;
			  clpolicy_<%=cid%>.setDefaultWriteConsistencyLevel(consistencyLevel_<%=cid%>);
		    keyspace_<%=cid%> = me.prettyprint.hector.api.factory.HFactory.createKeyspace(<%=keySpace%>, cluster_<%=cid%>,clpolicy_<%=cid%>);
		    
		    me.prettyprint.cassandra.serializers.StringSerializer serializer_<%=cid%> = me.prettyprint.cassandra.serializers.StringSerializer.get();
<%
			if("STANDARD".equals(columnFamilyType)){
				StringBuilder columns=new StringBuilder();
		        boolean isfirstColumn=true;
				for (int i = 0; i < sizeColumns; i++) {
					IMetadataColumn column = columnList.get(i);
		        	if(!isfirstColumn){
		        		columns.append(",");
		        	}else{
		        		isfirstColumn=false;
		        	}
					columns.append("\""+column.getOriginalDbColumnName()+"\"");
	             }
				if(isSpecifyKeys){
%>
			me.prettyprint.hector.api.query.MultigetSliceQuery<<%=rowKeyType%>, String, String> sliceQuery_<%=cid%> = me.prettyprint.hector.api.factory.HFactory.createMultigetSliceQuery(
				keyspace_<%=cid%> , keySerializer_<%=cid%>,serializer_<%=cid%>, serializer_<%=cid%>);
<%
				}else{
%>
			me.prettyprint.hector.api.query.RangeSlicesQuery<<%=rowKeyType%>, String, String> sliceQuery_<%=cid%> =
				me.prettyprint.hector.api.factory.HFactory.createRangeSlicesQuery(keyspace_<%=cid%> , keySerializer_<%=cid%>,serializer_<%=cid%>, serializer_<%=cid%>);
<%
				}
%>
			sliceQuery_<%=cid%>.setColumnNames(<%=columns.toString()%>);
<%
			}else{
				if(isSpecifyKeys){
%>
			me.prettyprint.hector.api.query.MultigetSuperSliceQuery<<%=rowKeyType%>, <%=sNameType%>, String, String> sliceQuery_<%=cid%> = me.prettyprint.hector.api.factory.HFactory.createMultigetSuperSliceQuery(
				keyspace_<%=cid%> , keySerializer_<%=cid%>,sNameSerializer_<%=cid%>, serializer_<%=cid%>, serializer_<%=cid%>);
<%
				}else{
%>
			me.prettyprint.hector.api.query.RangeSuperSlicesQuery<<%=rowKeyType%>, <%=sNameType%>, String, String> sliceQuery_<%=cid%> = 
				me.prettyprint.hector.api.factory.HFactory.createRangeSuperSlicesQuery(keyspace_<%=cid%> , keySerializer_<%=cid%>,sNameSerializer_<%=cid%>, serializer_<%=cid%>, serializer_<%=cid%>);	
<%
				}
			}
%>
			sliceQuery_<%=cid%>.setColumnFamily(<%=columnFamily%>);
<%			
			if(isSpecifyKeys){
%>
			sliceQuery_<%=cid%>.setKeys(<%=rowKeys%>);
<%
			}else{
%>
			sliceQuery_<%=cid%>.setKeys(<%=("".equals(keyStart) || "\"\"".equals(keyStart)?"null":keyStart)%>,<%=("".equals(keyEnd) || "\"\"".equals(keyEnd)?"null":keyEnd)%>);
			sliceQuery_<%=cid%>.setRowCount(<%=keyLimit%>);
<%
			}
			if(isSpecifyColumns){
%>
			sliceQuery_<%=cid%>.setColumnNames(<%=searchColumns%>);
<%
			}else{
%>
			sliceQuery_<%=cid%>.setRange(<%=("".equals(columnStart) || "\"\"".equals(columnStart)?"null":columnStart)%>,<%=("".equals(columnEnd) || "\"\"".equals(columnEnd)?"null":columnEnd)%>, false, <%=columnLimit%>);
<%
			}
			if("STANDARD".equals(columnFamilyType)){
				if(isSpecifyKeys){
%>
			me.prettyprint.hector.api.query.QueryResult<me.prettyprint.hector.api.beans.Rows<<%=rowKeyType%>,String, String>> result_<%=cid%> = sliceQuery_<%=cid%>.execute();
<%
				}else{
%>
			me.prettyprint.hector.api.query.QueryResult<me.prettyprint.hector.api.beans.OrderedRows<<%=rowKeyType%>,String, String>> result_<%=cid%> = sliceQuery_<%=cid%>.execute();
<%
				}
%>
			java.util.Iterator rows_<%=cid%> = result_<%=cid%>.get().iterator();
			while (rows_<%=cid%>.hasNext()) {
				nb_line_<%=cid %>++;
				me.prettyprint.hector.api.beans.Row row_<%=cid%>=(me.prettyprint.hector.api.beans.Row)rows_<%=cid%>.next();
				me.prettyprint.hector.api.beans.ColumnSlice slice_<%=cid%>=row_<%=cid%>.getColumnSlice();
<%
			}else{
				if(isSpecifyKeys){
%>
			me.prettyprint.hector.api.query.QueryResult<me.prettyprint.hector.api.beans.SuperRows<<%=rowKeyType%>,<%=sNameType%>,String, String>> result_<%=cid%> = sliceQuery_<%=cid%>.execute();
<%
				}else{
%>
			me.prettyprint.hector.api.query.QueryResult<me.prettyprint.hector.api.beans.OrderedSuperRows<<%=rowKeyType%>,<%=sNameType%>,String, String>> result_<%=cid%> = sliceQuery_<%=cid%>.execute();
<%
				}
%>
			java.util.Iterator superRows_<%=cid%> = result_<%=cid%>.get().iterator();
			while (superRows_<%=cid%>.hasNext()) {
				nb_line_<%=cid %>++;
				me.prettyprint.hector.api.beans.SuperRow superRow_<%=cid%>=(me.prettyprint.hector.api.beans.SuperRow)superRows_<%=cid%>.next();
				me.prettyprint.hector.api.beans.SuperSlice slice_<%=cid%>=superRow_<%=cid%>.getSuperSlice();
				java.util.List<me.prettyprint.hector.api.beans.HSuperColumn> superColumns_<%=cid%>=slice_<%=cid%>.getSuperColumns();
				for (me.prettyprint.hector.api.beans.HSuperColumn superColumn_<%=cid%> : superColumns_<%=cid%>) {
					
<%
			}
%>
			me.prettyprint.hector.api.beans.HColumn<String,String> column_<%=cid%>=null;

			java.nio.ByteBuffer columnValue_<%=cid%>=null;
<%
		if (outputs!=null && outputs.size() > 0){
		    IConnection out = outputs.get(0);
      		firstConnName = out.getName();
		  if (out.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				
			for (int i = 0; i < sizeColumns; i++) {
				IMetadataColumn column = columnList.get(i);
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
				JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
				String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
				if (incKey && column.getLabel().equals(keyColumn)) {
					if("STANDARD".equals(columnFamilyType)){
%>
			if(row_<%=cid%>.getKey()!=null){
<%
						if(javaType == JavaTypesManager.DATE) {
%>
				<%=firstConnName %>.<%=column.getLabel() %>=ParserUtils.parseTo_Date(String.valueOf(row_<%=cid%>.getKey()), <%= patternValue %>);
<%
						}else if(javaType == JavaTypesManager.BYTE_ARRAY) {
%>
				<%=firstConnName %>.<%=column.getLabel() %>=String.valueOf(row_<%=cid%>.getKey()).getBytes(utf8Charset);
<%
						} else {
%>
				<%=firstConnName %>.<%=column.getLabel() %>=ParserUtils.parseTo_<%=typeToGenerate%>(String.valueOf(row_<%=cid%>.getKey()));
<%						}%>
			}	
<%
					}else {
%>
			if(superRow_<%=cid%>.getKey()!=null){
<%
						if(javaType == JavaTypesManager.DATE) {
%>
				<%=firstConnName %>.<%=column.getLabel() %>=ParserUtils.parseTo_Date(String.valueOf(superRow_<%=cid%>.getKey()), <%= patternValue %>);
<%
						}else if(javaType == JavaTypesManager.BYTE_ARRAY) {
%>
				<%=firstConnName %>.<%=column.getLabel() %>=String.valueOf(superRow_<%=cid%>.getKey()).getBytes(utf8Charset);
<%
						} else {
%>
				<%=firstConnName %>.<%=column.getLabel() %>=ParserUtils.parseTo_<%=typeToGenerate%>(String.valueOf(superRow_<%=cid%>.getKey()));
<%
						}
%>
			}
<%
					}
				}else {
					if("SUPER".equals(columnFamilyType) && incSuperKey && column.getLabel().equals(superKeyColumn)){
%>
				columnValue_<%=cid%>=superColumn_<%=cid%>.getNameByteBuffer();
<%
					}else{
						if("STANDARD".equals(columnFamilyType)){
%>
					column_<%=cid%>=slice_<%=cid%>.getColumnByName("<%=column.getOriginalDbColumnName()%>");
					columnValue_<%=cid%>=(column_<%=cid%>==null?null:column_<%=cid%>.getValueBytes());
<%
						}else{
%>
					column_<%=cid%>=superColumn_<%=cid%>.getSubColumnByName("<%=column.getOriginalDbColumnName()%>");
					columnValue_<%=cid%>=(column_<%=cid%>==null?null:column_<%=cid%>.getValueBytes());
<%
						}
					}
%>
				if(columnValue_<%=cid%>!=null) {
<%
				if(javaType == JavaTypesManager.DATE) {
%>
					Long dateValue_<%=cid%>=columnValue_<%=cid%>.getLong();
					<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(new java.util.Date(dateValue_<%=cid%>), <%= patternValue %>);
<%
				} else if(javaType == JavaTypesManager.FLOAT){
%>
					<%=firstConnName %>.<%=column.getLabel() %>=columnValue_<%=cid%>.getFloat();
<%
				} else if(javaType == JavaTypesManager.CHARACTER){
%>
					<%=firstConnName %>.<%=column.getLabel() %>=columnValue_<%=cid%>.getChar();
<%
				} else if(javaType == JavaTypesManager.INTEGER){
%>
					<%=firstConnName %>.<%=column.getLabel() %>=columnValue_<%=cid%>.getInt();
<%
				} else if(javaType == JavaTypesManager.SHORT){
%>
					<%=firstConnName %>.<%=column.getLabel() %>=columnValue_<%=cid%>.getShort();
<%
				} else if(javaType == JavaTypesManager.LONG){
%>
					<%=firstConnName %>.<%=column.getLabel() %>=columnValue_<%=cid%>.getLong();
<%
				} else if(javaType == JavaTypesManager.DOUBLE){
%>
					<%=firstConnName %>.<%=column.getLabel() %>=columnValue_<%=cid%>.getDouble();
<%
				} else {
					String columnType=JavaTypesManager.getTypeToGenerate(column.getTalendType(),true);
%>
					<%=firstConnName %>.<%=column.getLabel() %> = <%if(typeMap.get(columnType)==null){%>(<%=columnType%>)<%}%>me.prettyprint.cassandra.serializers.<%=typeMap.get(columnType)==null?"ObjectSerializer":
						typeMap.get(columnType)%>.get().fromByteBuffer(columnValue_<%=cid%>);
<%
				}
%>
				}else{
					<%=firstConnName %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
				}
<%
				}
			   }
		     }
			}
      	}
    }
%>
    