<%@ jet 
  imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
	org.talend.core.model.process.IConnectionCategory
	
    java.util.List 
  " 
%>
<% 
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

boolean customEncoding="true".equals( ElementParameterParser.getValue(node,"__CUSTOM_ENCODING__"));
String encoding = ElementParameterParser.getValue(node,"__ENCODING__");

List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
String firstConnName = "";
if (conns!=null) {
	if (conns.size()>0) {
		IConnection conn = conns.get(0);
		if(conn!=null && conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
			firstConnName = conn.getName();
%>
<%=firstConnName %> = new <%=conn.getName() %>Struct();
<%
			}
		}
	}
	
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0) && firstConnName.length()>0) {
		IMetadataTable metadata = metadatas.get(0);
	
		String typeFile = ElementParameterParser.getValue(node,"__TYPEFILE__");
		if (typeFile.equals("SEQUENCE")) {
		
			String keyColumn = ElementParameterParser.getValue(node,"__KEYCOLUMN__");
			String valueColumn = ElementParameterParser.getValue(node,"__VALUECOLUMN__");
			
			List<IMetadataColumn> listColumns = metadata.getListColumns();
			String talendKeyClass = "";
			String talendValueClass = "";
			for (IMetadataColumn column : listColumns) {
				if (column.getLabel().equals(keyColumn)) {
					talendKeyClass = column.getTalendType();
				}
				if (column.getLabel().equals(valueColumn)) {
					talendValueClass = column.getTalendType();
				}
			}
			
			String keyClass="org.apache.hadoop.io.Text";
			if (talendKeyClass.equals("id_Boolean")) keyClass="org.apache.hadoop.io.BooleanWritable";
			if (talendKeyClass.equals("id_Byte")) keyClass="org.apache.hadoop.io.ByteWritable";
			if (talendKeyClass.equals("id_byte[]")) keyClass="org.apache.hadoop.io.BytesWritable";
			if (talendKeyClass.equals("id_Double")) keyClass="org.apache.hadoop.io.DoubleWritable";
			if (talendKeyClass.equals("id_Float")) keyClass="org.apache.hadoop.io.FloatWritable";
			if (talendKeyClass.equals("id_Integer")) keyClass="org.apache.hadoop.io.IntWritable";
			if (talendKeyClass.equals("id_Long")) keyClass="org.apache.hadoop.io.LongWritable";
			if (talendKeyClass.equals("id_Short")) keyClass="org.apache.hadoop.io.ShortWritable";
			if (talendKeyClass.equals("id_String")) keyClass="org.apache.hadoop.io.Text";
			
			String valueClass="org.apache.hadoop.io.Text";
			if (talendValueClass.equals("id_Boolean")) valueClass="org.apache.hadoop.io.BooleanWritable";
			if (talendValueClass.equals("id_Byte")) valueClass="org.apache.hadoop.io.ByteWritable";
			if (talendValueClass.equals("id_byte[]")) valueClass="org.apache.hadoop.io.BytesWritable";
			if (talendValueClass.equals("id_Double")) valueClass="org.apache.hadoop.io.DoubleWritable";
			if (talendValueClass.equals("id_Float")) valueClass="org.apache.hadoop.io.FloatWritable";
			if (talendValueClass.equals("id_Integer")) valueClass="org.apache.hadoop.io.IntWritable";
			if (talendValueClass.equals("id_Long")) valueClass="org.apache.hadoop.io.LongWritable";
			if (talendValueClass.equals("id_Short")) valueClass="org.apache.hadoop.io.ShortWritable";
			if (talendValueClass.equals("id_String")) valueClass="org.apache.hadoop.io.Text";
		
%>
		<%=firstConnName %>.<%=keyColumn %> = key_<%=cid%>.<%=((keyClass.equals("org.apache.hadoop.io.Text"))?"toString()":"get()") %>;
		<%=firstConnName %>.<%=valueColumn %> = value_<%=cid%>.<%=((valueClass.equals("org.apache.hadoop.io.Text"))?"toString()":"get()") %>;
<%
		} else {
			if (metadata!=null) {
				List<IMetadataColumn> listColumns = metadata.getListColumns();
				for (int valueN = 0; valueN < listColumns.size(); valueN++) {
					IMetadataColumn column = listColumns.get(valueN);

					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
					if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>
<%=firstConnName %>.<%=column.getLabel() %> = fid_<%=cid %>.get(<%=valueN %>);
<%
					} else {
%>
if(fid_<%=cid %>.get(<%=valueN %>)!=null && fid_<%=cid %>.get(<%=valueN %>).length() > 0) {
<%
						if (javaType == JavaTypesManager.DATE) {
%>
		<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(fid_<%=cid %>.get(<%=valueN %>), <%= patternValue %>);
<%
						} else if(javaType == JavaTypesManager.BYTE_ARRAY) {
%>
		<%=firstConnName %>.<%=column.getLabel() %> = fid_<%=cid %>.get(<%=valueN %>).getBytes(<%=(customEncoding?encoding:"utf8Charset")%>);
<%
						} else {
%>
		<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%=typeToGenerate %>(fid_<%=cid %>.get(<%=valueN %>));
<%
						}
%>
}else{
	<%=firstConnName %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
}
<%
					}
				} // for
			}
		}
	}
%>
