<%@ jet
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.types.Java2STLangTypesHelper
		org.talend.designer.runprocess.ProcessorUtilities
		org.talend.designer.runprocess.ProcessorException
		java.util.List
		java.util.Map
		"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String processId = node.getProcess().getId();
	
	String pigVersion = ElementParameterParser.getValue(node, "__PIG_VERSION__");
	boolean isLocal = "true".equals(ElementParameterParser.getValue(node, "__LOCAL__"));
	boolean useKrb = "true".equals(ElementParameterParser.getValue(node, "__USE_KRB__"));
	String inputFilename = ElementParameterParser.getValue(node, "__INPUT_FILENAME__");
	String databaseName = ElementParameterParser.getValue(node, "__DATABASE_NAME__");
	String tableName = ElementParameterParser.getValue(node, "__TABLE_NAME__");
	String fieldSeparator = ElementParameterParser.getValue(node, "__FIELD_SEPARATOR_CHAR__");
	String function = ElementParameterParser.getValue(node, "__LOAD__");
	
	String fsDefaultName = ElementParameterParser.getValue(node, "__FS_DEFAULT_NAME__");
	String mapredJobTracker = ElementParameterParser.getValue(node, "__MAPRED_JOB_TRACKER__");
	String thriftServer = ElementParameterParser.getValue(node, "__THRIFT_SERVER__");
	
	List<Map<String, String>> advProps = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__ADVANCED_PROPERTIES__");
	List<Map<String, String>> hadoopProps = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__HADOOP_ADVANCED_PROPERTIES__");
	
	List<Map<String, String>> registerJarForHCatalog = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__REGISTER_JAR__");
	List<Map<String, String>> partitionFilter = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__PARTITION_FILTER__");
	
	boolean defineJarsToRegister = "true".equals(ElementParameterParser.getValue(node, "__DEFINE_REGISTER_JAR__"));
	List<Map<String, String>> registerJar = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__DRIVER_JAR__");
	
	boolean generateRegisterJarCodeForHCatalog = (!isLocal && "HDP_1_0".equals(pigVersion) && "HCatLoader".equals(function) && !defineJarsToRegister);
	boolean generateRegisterJarCode = registerJar.size() > 0;
	
	java.util.List<String> jarsToRegister = null;
	java.util.List<String> jars = null;

	if(generateRegisterJarCodeForHCatalog || generateRegisterJarCode) {
		String[] commandLine = new String[] {"<command>"};
		try {
			commandLine = ProcessorUtilities.getCommandLine("win32",true, processId, "",org.talend.designer.runprocess.IProcessor.NO_STATISTICS,org.talend.designer.runprocess.IProcessor.NO_TRACES, new String[]{});
		} catch (ProcessorException e) {
			e.printStackTrace();
		}

		jarsToRegister = new java.util.ArrayList();
		
		if(generateRegisterJarCode) {
			for(Map<String, String> jar : registerJar){
				jarsToRegister.add(jar.get("JAR_NAME"));
			}
		}
		
		if(generateRegisterJarCodeForHCatalog) {
			jarsToRegister.add("hcatalog");
			jarsToRegister.add("hive-exec");
			jarsToRegister.add("hive-metastore");
			jarsToRegister.add("jdo2-api");
			jarsToRegister.add("libfb303");
			jarsToRegister.add("libthrift");
		}

		for (int j = 0; j < commandLine.length; j++) {
			if(commandLine[j].contains("jar")) {
				jars = java.util.Arrays.asList(commandLine[j].split(";"));
				break;
			}
		}
	}

	String previous_node="";
	String start_node=cid;

	if(node.getIncomingConnections()!=null && node.getIncomingConnections().size()>0) {
		start_node = node.getDesignSubjobStartNode().getUniqueName();
	}

	if(generateRegisterJarCodeForHCatalog || generateRegisterJarCode) {
%>
		class GetJarsToRegister_<%=cid%> {
			private String oozieClasspathLine;
			private boolean isOozieRuntime;
			
			public GetJarsToRegister_<%=cid%>() {
				try {
					this.isOozieRuntime = setJarsToRegister("../../job.xml");
				} catch (java.lang.Exception e) {
					e.printStackTrace();
				}
			}
		
			public boolean setJarsToRegister(String filename) throws IOException, org.dom4j.DocumentException {
				String jobXmlPath = new java.io.File(filename).getCanonicalPath();
				if(isNeedAddLibsPath(jobXmlPath)) {
					
					org.dom4j.io.SAXReader reader_oozie = new org.dom4j.io.SAXReader();
					org.dom4j.Document document_oozie = reader_oozie.read(jobXmlPath);
					List list_oozie = document_oozie.selectNodes("/configuration/property");
					for (java.util.Iterator iter_oozie = list_oozie.iterator(); iter_oozie.hasNext();) {
						org.dom4j.Element element_oozie = (org.dom4j.Element) iter_oozie.next();
						String name_oozie = element_oozie.elementText("name");
						if(name_oozie.equals("mapred.cache.localFiles")) {
							this.oozieClasspathLine = element_oozie.elementText("value");
							return true;
						}
					}
				}
				return false;
			}
			
			public String replaceJarPaths(String originalClassPathLine) throws Exception {
				String classPathLine = "";
				String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
				
				if (isNeedAddLibsPath(crcMapPath)) {
					java.util.Map<String, String> crcMap = null;
					java.io.ObjectInputStream ois = new ObjectInputStream(new java.io.FileInputStream(crcMapPath));
					crcMap = (java.util.Map<String, String>) ois.readObject();
					ois.close();
					classPathLine = addLibsPath(originalClassPathLine, crcMap);
				} else if(this.isOozieRuntime) {
					if(this.oozieClasspathLine!=null) {
						List<String> oozieJars = java.util.Arrays.asList(this.oozieClasspathLine.split(","));
						for(int j=0; j<oozieJars.size(); j++) {
							if(oozieJars.get(j).contains(originalClassPathLine.substring(originalClassPathLine.lastIndexOf("/")))) {
								classPathLine = oozieJars.get(j);
								break;
							}
						}
					}
				} else {
					classPathLine = originalClassPathLine;
				}
				return classPathLine;
			}
		
			private boolean isNeedAddLibsPath(String crcMapPath) {
				if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
					return false;
				}
				return true;
			}
		
		
			private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
				for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
					line = adaptLibPaths(line, entry);
				}
				return line;
			}
		
			private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
				String jarName = entry.getValue();
				String crc = entry.getKey();
				String libStringFinder = "../lib/" + jarName;
				if (line.contains(libStringFinder)) {
					line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
				} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
					line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
				} else if (line.contains(";" + jarName + ";")) {
					line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
				}
				return line;
			}
		
		}

		GetJarsToRegister_<%=cid%> getJarsToRegister_<%=cid %> = new GetJarsToRegister_<%=cid%>();
<%
	}
%>
	java.util.Properties props_<%=cid%> = new java.util.Properties();
	try {
<%
		if(isLocal) { // LOCAL mode
%>
			org.apache.pig.impl.PigContext context_<%=cid%> = new org.apache.pig.impl.PigContext(org.apache.pig.ExecType.LOCAL, props_<%=cid%>);
<%
		} else { // MAPREDUCE mode
%>
			props_<%=cid%>.put("fs.default.name", <%=fsDefaultName%>);
			props_<%=cid%>.put("mapred.job.tracker", <%=mapredJobTracker%>);
<%
			if("HCatLoader".equals(function)) { // If the HCatalog loader is used, we need to add the HCat metastore in the pig context
%>
				props_<%=cid%>.put("hcat.metastore.uri", <%=thriftServer%>);
<%
			}
			if(("HDP_1_0".equals(pigVersion) || "APACHE_1_0_0".equals(pigVersion) || "CLOUDERA_CDH4".equals(pigVersion)) && useKrb) {
				String namenodePrincipal = ElementParameterParser.getValue(node, "__NAMENODE_PRINCIPAL__");
				String jobTrackerPrincipal = ElementParameterParser.getValue(node, "__JOBTRACKER_PRINCIPAL__");
%>
				props_<%=cid%>.put("dfs.namenode.kerberos.principal", <%=namenodePrincipal%>);
				props_<%=cid%>.put("mapreduce.jobtracker.kerberos.principal", <%=jobTrackerPrincipal%>);
<%
			}
%>
<%
			if(hadoopProps.size() > 0){
				for(Map<String, String> item : hadoopProps){
%>
					props_<%=cid%>.put(<%=item.get("PROPERTY") %> ,<%=item.get("VALUE") %>);
<% 
				} 
			}
%>
			org.apache.pig.impl.PigContext context_<%=cid%> = new org.apache.pig.impl.PigContext(org.apache.pig.ExecType.MAPREDUCE, props_<%=cid%>);
<%
		}
%>
		org.apache.pig.PigServer pigServer_<%=start_node%> = new org.apache.pig.PigServer(context_<%=cid%>);
<%
	if(advProps.size() > 0){
%>
		StringBuilder script_<%=cid%>=new StringBuilder();
<%
		for(Map<String, String> item : advProps){
%>
		script_<%=cid%>.append("SET "+<%=item.get("PROPERTY") %>+" "+<%=item.get("VALUE") %>+";");
<% 
		} 
%>
		pigServer_<%=start_node%>.registerScript(new java.io.ByteArrayInputStream(script_<%=cid%>.toString().getBytes()));
<%
	}
%>

		StringBuilder sb_<%=cid%> = new StringBuilder();

<%		
		if(generateRegisterJarCodeForHCatalog || generateRegisterJarCode) {
			for(int i=0; i<jarsToRegister.size(); i++) {
				String jarToRegister = jarsToRegister.get(i);
				for(int j=0; j<jars.size(); j++) {
					if(jars.get(j).contains(jarToRegister)) {
%>
						pigServer_<%=start_node%>.registerJar(getJarsToRegister_<%=cid %>.replaceJarPaths("<%=jars.get(j)%>"));
<%

						break;
					}
				}
			}
		} 

		if(!isLocal && "HCatLoader".equals(function)) { // If the HCatalog loader is used, we don't need a filename anymore, but a database name and a table name.
			if(!generateRegisterJarCodeForHCatalog) {
				if(registerJarForHCatalog.size() > 0){
					for(Map<String, String> item : registerJarForHCatalog){
%>
						pigServer_<%=start_node%>.registerJar(<%=item.get("JAR_PATH") %>);
<% 
					} 
				}
			}
%>
			
			System.setProperty("hive.metastore.local", "false");
			System.setProperty("hive.metastore.uris", <%=thriftServer%>);
			sb_<%=cid%>.append("<%=cid%>_RESULT<%=partitionFilter.size()>0?"_TEMP":""%> = LOAD '"+<%=databaseName%>+"."+<%=tableName%>+"' using org.apache.hcatalog.pig.<%=function%>()");
<%
		} else {
			if("CustomLoader".equals(function)) {
				String customLoader = ElementParameterParser.getValue(node, "__CUSTOM_LOADER__");
%>
				sb_<%=cid%>.append("<%=cid%>_RESULT = LOAD '"+<%=inputFilename%>+"' using " + <%=customLoader%>);
<%
			} else {
%>
				sb_<%=cid%>.append("<%=cid%>_RESULT = LOAD '"+<%=inputFilename%>+"' using <%=function%>(<%="PigStorage".equals(function)?"'\"+"+fieldSeparator+"+\"'":""%>)");
<%
			
				List<IMetadataTable> metadatas = node.getMetadataList();
				IMetadataTable metadata = null;
				if(metadatas != null && metadatas.size() > 0) {
					metadata = metadatas.get(0);
				}
				if(metadata!=null) {
					if(metadata.getListColumns() != null && metadata.getListColumns().size() > 0) {
%>
						sb_<%=cid%>.append(" AS (");
<%
						for(int i=0; i<metadata.getListColumns().size(); i++) {
%>
							sb_<%=cid%>.append("<%=i!=0?", ":""%><%=metadata.getListColumns().get(i).getLabel()%>:<%=Java2STLangTypesHelper.getPigType(metadata, metadata.getListColumns().get(i).getLabel())%>");
<%

						}
%>
						sb_<%=cid%>.append(")");
<%
					}
				}
			}
		}
%>
		sb_<%=cid%>.append(";");
		pigServer_<%=start_node%>.registerQuery(sb_<%=cid%>.toString());
<%
		if(!isLocal && "HCatLoader".equals(function)) { // If the HCatalog loader is used, we will have to consider the partition filter
			if(partitionFilter.size() > 0){
				int i = 0;
%>
				sb_<%=cid%> = new StringBuilder();
				sb_<%=cid%>.append("<%=cid%>_RESULT = FILTER <%=cid%>_RESULT_TEMP BY ");
<%
				for(Map<String, String> item : partitionFilter){
					if(i++ != 0) {
%>
						sb_<%=cid%>.append(" AND ");
<%
					}
%>
					sb_<%=cid%>.append("(" + <%=item.get("PART_NAME") %>);
					sb_<%=cid%>.append(" == ");
					sb_<%=cid%>.append(<%=item.get("PART_VALUE") %> + ")");
<% 
				}
%>
					sb_<%=cid%>.append(";");
					pigServer_<%=start_node%>.registerQuery(sb_<%=cid%>.toString());
<%				
			}
		}
%>

