<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		
		java.util.Map
		java.util.List
	" 
%>
		<%@ include file="../tCouchDBReadConf/tCouchDBReadConf_begin.inc.javajet"%>
			nb_line_<%=cid%> ++;
<%
			if(include_docs){
%>
			values_<%=cid%>= (java.util.Map<String,Object>)valueRow_<%=cid%>.getProperty("doc");
<%
			}
			columnList = metadata.getListColumns();
    		int sizeColumns = columnList.size();
			if(firstConnName.length()>0){
%>
				Object valueObj_<%=cid%>=null;
<%
				for (int i = 0; i < sizeColumns; i++) {
					IMetadataColumn column = columnList.get(i);
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
%>
				if(values_<%=cid%>!=null){
					valueObj_<%=cid%>=values_<%=cid%>.get("<%=column.getOriginalDbColumnName()%>");
<%
          			if(javaType == JavaTypesManager.OBJECT) {
%>
					<%=firstConnName %>.<%=column.getLabel() %> = valueObj_<%=cid%>;
<%
          			}else{
%>
					if(valueObj_<%=cid%>!=null && valueObj_<%=cid%>.toString().length() > 0) {
<%
						if(javaType == JavaTypesManager.DATE) {
%>
						if(valueObj_<%=cid%> instanceof java.util.HashMap){
							Object dateObj_<%=cid%>=((java.util.HashMap)valueObj_<%=cid%>).get("time");
							if(dateObj_<%=cid%>!=null && dateObj_<%=cid%> instanceof Long){
								<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(new java.util.Date((Long)dateObj_<%=cid%>), <%= patternValue %>);
							}else{
								<%=firstConnName %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
							}
						}else{
							<%=firstConnName %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
						}
					
<%
						}else if(javaType == JavaTypesManager.BYTE_ARRAY) {
%>
						<%=firstConnName %>.<%=column.getLabel() %> = java.nio.charset.Charset.defaultCharset().decode(java.nio.ByteBuffer.wrap((byte[])valueObj_<%=cid%>)).toString().getBytes(utf8Charset);
<%
						} else if(javaType == JavaTypesManager.STRING){
%>
						<%=firstConnName %>.<%=column.getLabel() %> = valueObj_<%=cid%>.toString();
<%
						} else {
%>
						<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%=typeToGenerate %>(valueObj_<%=cid%>.toString());
<%
						}
%>
					}else{
						<%=firstConnName %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
					}
				}
<%
          			}
				}
			}
		}
	}
%>
	
