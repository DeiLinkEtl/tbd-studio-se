<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
		java.util.Map
	"
%>

	<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();	
	String cid = node.getUniqueName();
	boolean useExistingConnection = "true".equals(ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__"));
	String localdir = ElementParameterParser.getValue(node, "__LOCALDIR__");	
	String remotedir = ElementParameterParser.getValue(node, "__REMOTEDIR__");
    List<Map<String, String>> files = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILES__");	
	
	String hadoopVersion = ElementParameterParser.getValue(node, "__DB_VERSION__");
	String fsDefalutName = "fs.default.name";
	if(hadoopVersion!=null && "Cloudera_CDH4".equals(hadoopVersion)){
		fsDefalutName="fs.defaultFS";
	}	
	
	String user = null;
	%>
	
	int nb_file_<%=cid%> = 0;
	int nb_success_<%=cid%> = 0;
	
	String username_<%=cid%> = "";
	org.apache.hadoop.fs.FileSystem fs_<%=cid%> = null;
	
	<%if(!useExistingConnection){
		String fsDefaultName = ElementParameterParser.getValue(node, "__FS_DEFAULT_NAME__");
		boolean useKrb = "true".equals(ElementParameterParser.getValue(node, "__USE_KRB__"));
		String kerberosPrincipal = ElementParameterParser.getValue(node, "__NAMENODE_PRINCIPAL__");
		
		boolean isCustom = "CUSTOM".equals(ElementParameterParser.getValue(node, "__DISTRIBUTION__"));
		String auth = ElementParameterParser.getValue(node, "__AUTHENTICATION_MODE__");
		%>
		org.apache.hadoop.conf.Configuration conf_<%=cid%> = new org.apache.hadoop.conf.Configuration();
		conf_<%=cid%>.set("<%=fsDefalutName%>", <%=fsDefaultName%>);
<%
		if(!(((("HDP_1_0").equals(hadoopVersion) || ("HDP_1_2").equals(hadoopVersion) || ("APACHE_1_0_0").equals(hadoopVersion) || ("APACHE_1_0_3_EMR").equals(hadoopVersion) || ("Cloudera_CDH4").equals(hadoopVersion) && !isCustom) && useKrb)
		 || (isCustom && "KRB".equals(auth)))) {
			user = ElementParameterParser.getValue(node, "__USERNAME__");
		} else {
%>
			conf_<%=cid%>.set("dfs.namenode.kerberos.principal", <%=kerberosPrincipal%>);
<%
		}
		if(((("APACHE_0_20_2").equals(hadoopVersion) || ("MAPR1").equals(hadoopVersion) || ("MAPR2").equals(hadoopVersion) || ("MAPR212").equals(hadoopVersion) || ("MapR_EMR").equals(hadoopVersion)) && !isCustom) || (isCustom && "UGI".equals(auth))){
			String group = ElementParameterParser.getValue(node, "__GROUP__");
			%>
			conf_<%=cid%>.set("hadoop.job.ugi",<%=user%>+","+<%=group%>);
			fs_<%=cid%> = org.apache.hadoop.fs.FileSystem.get(conf_<%=cid%>);
		<%
		}else{
		%>
			username_<%=cid%> = <%=user%>;
			if(username_<%=cid%> == null || "".equals(username_<%=cid%>)){
				fs_<%=cid%> = org.apache.hadoop.fs.FileSystem.get(conf_<%=cid%>);
			}else{
				fs_<%=cid%> = org.apache.hadoop.fs.FileSystem.get(new java.net.URI(conf_<%=cid%>.get("<%=fsDefalutName%>")),conf_<%=cid%>,username_<%=cid%>);
			}	
		<%
		}
	}else{
		String connectionSid = ElementParameterParser.getValue(node, "__CONNECTION__");
		%>
		org.apache.hadoop.conf.Configuration conf_<%=cid%> = (org.apache.hadoop.conf.Configuration)globalMap.get("conn_<%=connectionSid%>");
		<%
		List<? extends INode> nodes = node.getProcess().getGeneratingNodes();
	    for(INode targetNode : nodes){
	    	if (targetNode.getUniqueName().equals(connectionSid)) {
		      	
			boolean useKrb = "true".equals(ElementParameterParser.getValue(targetNode, "__USE_KRB__"));
			String kerberosPrincipal = ElementParameterParser.getValue(targetNode, "__NAMENODE_PRINCIPAL__");
			
			boolean isCustom = "CUSTOM".equals(ElementParameterParser.getValue(targetNode, "__DISTRIBUTION__"));
			String auth = ElementParameterParser.getValue(targetNode, "__AUTHENTICATION_MODE__");
			
		      	if(((("APACHE_0_20_2").equals(hadoopVersion) || ("MAPR1").equals(hadoopVersion) || ("MAPR2").equals(hadoopVersion) || ("MAPR212").equals(hadoopVersion) || ("MapR_EMR").equals(hadoopVersion)) && !isCustom) || (isCustom && "UGI".equals(auth))){
			   	%>
					fs_<%=cid%> = org.apache.hadoop.fs.FileSystem.get(conf_<%=cid%>);
				<%
			  	}else{
					if(!(((("HDP_1_0").equals(hadoopVersion) || ("HDP_1_2").equals(hadoopVersion) || ("APACHE_1_0_0").equals(hadoopVersion) || ("APACHE_1_0_3_EMR").equals(hadoopVersion) || ("Cloudera_CDH4").equals(hadoopVersion)) && !isCustom && useKrb) || (isCustom && "KRB".equals(auth)))) {
						user = ElementParameterParser.getValue(targetNode, "__USERNAME__");
					} else {
%>
						conf_<%=cid%>.set("dfs.namenode.kerberos.principal", <%=kerberosPrincipal%>);
<%
					}
			  	%>
			  		username_<%=cid%> = <%=user%>;
					if(username_<%=cid%> == null || "".equals(username_<%=cid%>)){
						fs_<%=cid%> = org.apache.hadoop.fs.FileSystem.get(conf_<%=cid%>);
					}else{
						fs_<%=cid%> = org.apache.hadoop.fs.FileSystem.get(new java.net.URI(conf_<%=cid%>.get("<%=fsDefalutName%>")),conf_<%=cid%>,username_<%=cid%>);
					}
			  	<%
			  	}
		      	break;
		    }
	    }
	}%>
	
	fs_<%=cid%>.mkdirs(new org.apache.hadoop.fs.Path(<%=remotedir%>));
	java.util.List<String> msg_<%=cid%> = new java.util.ArrayList<String>();
    java.util.List<java.util.Map<String,String>> list_<%=cid %> = new java.util.ArrayList<java.util.Map<String,String>>();	
	<%
    for (int i=0; i<files.size(); i++) {
    	Map<String, String> line = files.get(i);
		%>    
		java.util.Map<String,String> map_<%=cid %>_<%=i %> = new java.util.HashMap<String,String>();
		map_<%=cid %>_<%=i %>.put(<%= line.get("FILEMASK") %>,<%= line.get("NEWNAME") %>);		
	 	list_<%=cid %>.add(map_<%=cid %>_<%=i %>);       
	<%
	}
	%>	

	String localdir_<%=cid %>  = <%=localdir%>;	
	for (java.util.Map<String, String> map_<%=cid %> : list_<%=cid %>) 
	{

