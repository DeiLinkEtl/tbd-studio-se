<%@ jet
	    imports="
		org.talend.core.model.process.INode 	
		org.talend.core.model.process.ElementParameterParser 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		java.util.List
		java.util.Map
	    "
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;

INode node = (INode)codeGenArgument.getArgument();

String cid = node.getUniqueName();
boolean useExistingConn = "true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
%>


<%
List<IMetadataTable> metadatas = node.getMetadataList();

if ((metadatas!=null) && (metadatas.size() > 0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata != null) {
    	
		String docName = ElementParameterParser.getValue(node, "__DOC__");
    	String viewName = ElementParameterParser.getValue(node, "__VIEW__");
    	String limit = ElementParameterParser.getValue(node, "__LIMIT__");
		List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
		if (conns != null){
		
			if (conns.size()>0){
		
				IConnection conn =conns.get(0);
				String connName = conn.getName();
		
				if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
		
					List<IMetadataColumn> columns = metadata.getListColumns();
					int nbColumns = columns.size();
					if(nbColumns>0){
					    class Generate{
					        
					        public void generate(String connName,String cid,IMetadataTable metadata){
                                String[] columns = new String[]{"Id","Key","Value","Document"};
                                for(String columnName:columns){
                                    IMetadataColumn column = metadata.getColumn(columnName);
                                    String talendType = column.getTalendType();
                                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(talendType, column.isNullable());
                                    JavaType javaType = JavaTypesManager.getJavaTypeFromId(talendType);
                                    String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
                                    if(column!=null){
                                        if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>
                                            <%=connName%>.<%=columnName %> = jsonRow_<%=cid%>.get<%=columnName%>();
<%
                                        }else if(javaType == JavaTypesManager.DATE) {
%>
                                            <%=connName%>.<%=columnName %> = ParserUtils.parseTo_Date(new Date(jsonRow_<%=cid%>.get<%=columnName%>()),<%=patternValue%>);
<%
                                        }else if(javaType == JavaTypesManager.BYTE_ARRAY){
%>
                                            <%=connName%>.<%=columnName %> = jsonRow_<%=cid%>.get<%=columnName%>().getBytes();
<%
                                        }else{
%>
                                            <%=connName%>.<%=columnName %> = ParserUtils.parseTo_<%= typeToGenerate %>(jsonRow_<%=cid%>.get<%=columnName%>());
<%
                                        }
                                    }
                                }
%>
                                nb_line_<%=cid%>++;
<%
					        }
					        public void generateParameter(String cid,Object key,String method){
					            if(key!=null && !"".equals(key.toString().trim()) && !"\"\"".equals(key.toString().trim())){
	                                %>
	                                key_<%=cid%> = <%=key%>;
	                                if(key_<%=cid%> instanceof String){
	                                    query_<%=cid%>.<%=method%>(key_<%=cid%>.toString());
	                                }else if(key_<%=cid%> instanceof Object[]){
	                                    query_<%=cid%>.<%=method%>(com.couchbase.client.protocol.views.ComplexKey.of((Object[])key_<%=cid%>));
	                                }else{
	                                    throw new RuntimeException("The type of "+key_<%=cid%>+" should be String or Object[]!");
	                                }
	                                <%
	                            }
					        }
					        public void generateMap(String connName,String cid,IMetadataColumn column){
					            String columnName = column.getLabel();
                                String talendType = column.getTalendType();
                                String typeToGenerate = JavaTypesManager.getTypeToGenerate(talendType, column.isNullable());
                                JavaType javaType = JavaTypesManager.getJavaTypeFromId(talendType);
                                String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
                                if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>
                                    <%=connName%>.<%=columnName %> = str_<%=cid%>;
<%
                                }else if(javaType == JavaTypesManager.DATE) {
%>
                                    <%=connName%>.<%=columnName %> = ParserUtils.parseTo_Date(new Date(str_<%=cid%>),<%=patternValue%>);
<%
                                }else if(javaType == JavaTypesManager.BYTE_ARRAY){
%>
                                    <%=connName%>.<%=columnName %> = str_<%=cid%>.getBytes();
<%
                                }else{
%>
                                    <%=connName%>.<%=columnName %> = ParserUtils.parseTo_<%= typeToGenerate %>(str_<%=cid%>);
<%
                                }
%>
                                nb_line_<%=cid%>++;
<%
					        }
					    }
					    Generate generateCode = new Generate();
					    String fromview = ElementParameterParser.getValue(node,"__FROMVIEW__");
					    
					    if("true".equals(fromview)){
					        String include_docs = ElementParameterParser.getValue(node,"__INCLUDE_DOCS__");
					        String inclusiveend = ElementParameterParser.getValue(node,"__INCLUSIVEEND__");
					        String isreduce = ElementParameterParser.getValue(node,"__ISREDUCE__");
					        String stale = ElementParameterParser.getValue(node,"__STALE__");
					        String debug = ElementParameterParser.getValue(node,"__DEBUG__");
					        String descending = ElementParameterParser.getValue(node,"__DESCENDING__");
					        String useComplexkey = ElementParameterParser.getValue(node,"__USECOMPLEXKEY__");
					        Object complexkey = ElementParameterParser.getValue(node,"__COMPLEXKEY__");
					        String viewkey = ElementParameterParser.getValue(node, "__VIEWKEY__");
					        Object startkey = ElementParameterParser.getValue(node,"__STARTKEY__");
					        Object endkey = ElementParameterParser.getValue(node,"__ENDKEY__");
					        String startkey_docid = ElementParameterParser.getValue(node,"__STARTKEY_DOCID__");
					        String endkey_docid = ElementParameterParser.getValue(node,"__ENDKEY_DOCID__");
					        String group = ElementParameterParser.getValue(node,"__USEGROUP__");
					        String group_level = ElementParameterParser.getValue(node,"__GROUP_LEVEL__");
%>
                            com.couchbase.client.protocol.views.View view_<%=cid%> = client_<%=cid%>.getView(<%=docName%>, <%=viewName%>);
                            com.couchbase.client.protocol.views.Query query_<%=cid%> = new com.couchbase.client.protocol.views.Query();
                            Object key_<%=cid%> = null;
<%
                            generateCode.generateParameter(cid,startkey,"setRangeStart");
                            generateCode.generateParameter(cid,endkey,"setRangeEnd");
                            generateCode.generateParameter(cid,startkey_docid,"setStartkeyDocID");
                            generateCode.generateParameter(cid,endkey_docid,"setEndkeyDocID");
                            if("true".equals(useComplexkey)){
                                generateCode.generateParameter(cid,complexkey,"setKeys");
                            } else if(viewkey!=null &&!"".equals(viewkey)){
%>
                                query_<%=cid%>.setKey(<%=viewkey%>);
<%
                            }
                            if(limit!=null &&!"".equals(limit)){
%>
                                query_<%=cid%>.setLimit(<%=limit%>);
<%
                            }
                            if("false".equals(isreduce)&&"true".equals(include_docs)){
%>
                                query_<%=cid%>.setIncludeDocs(<%=include_docs%>); 
<%
                            }else if("true".equals(isreduce)&&"false".equals(include_docs)){
%>
                                query_<%=cid%>.setReduce(<%=isreduce%>);
<%
                                if("true".equals(group)){
%>
                                    query_<%=cid%>.setGroup(<%=group%>);
<%
                                    if(group_level!=null && !"".equals(group_level.trim())){
%>
                                        query_<%=cid%>.setGroupLevel(<%=group_level%>);
<%
                                    }
                                }
                            }
                            // fromview true reduce false doc false --->id,key,value ----->real component
                            // fromview true reduce true doc false --->key value ----->real component
                            // fromview true reduce false doc true --->id key value doc
                            // fromview false isjson true --->doc
                            // fromview false isjson false --->value ----->real component
%>
                            query_<%=cid%>.setStale(com.couchbase.client.protocol.views.Stale.<%=stale%>);
                            query_<%=cid%>.setDescending(<%=descending%>);
                            query_<%=cid%>.setDebug(<%=debug%>);
                            query_<%=cid%>.setInclusiveEnd(<%=inclusiveend%>); 
                            com.couchbase.client.protocol.views.ViewResponse result_<%=cid%> = client_<%=cid%>.query(view_<%=cid%>, query_<%=cid%>);
                            java.util.Iterator<com.couchbase.client.protocol.views.ViewRow> itr_<%=cid%> = result_<%=cid%>.iterator();
                            while (itr_<%=cid%>.hasNext()) {
                                com.couchbase.client.protocol.views.ViewRow  jsonRow_<%=cid%> = itr_<%=cid%>.next();
<%
                                generateCode.generate(connName,cid,metadata);
                        }else{
                            String isjson = ElementParameterParser.getValue(node,"__ISJSON__");
                            String searchKey = ElementParameterParser.getValue(node, "__KEY__");
                            if("true".equals(isjson)){
%>
                                <%=connName%>.Document = client_<%=cid%>.get(<%=searchKey%>);
<%
                            }else{
%>
                                Object obj_<%=cid%> = client_<%=cid%>.get(<%=searchKey%>);
                                if(obj_<%=cid%>!=null){
                                    String str_<%=cid%> = obj_<%=cid%>.toString();
<%
                                    IMetadataColumn column = metadata.getColumn("Value");;
                                    generateCode.generateMap(connName,cid,column);
%>
                                }
<%
                            }
                        }
                    }		
				}
			}
		}			 
	}	    
}
%>