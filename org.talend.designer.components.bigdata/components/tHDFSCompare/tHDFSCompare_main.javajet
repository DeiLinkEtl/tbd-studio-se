<%@ jet 
	imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.IConnection
    org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.IConnectionCategory
	org.talend.core.model.process.ElementParameterParser
	java.util.Map 
    java.util.List 
	"
%>

	<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	String fsDefaultName = ElementParameterParser.getValue(node, "__FS_DEFAULT_NAME__");

	boolean useExistingConnection = "true".equals(ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__"));
	List<Map<String, String>> hadoopProps = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__HADOOP_ADVANCED_PROPERTIES__");
	String user = null;
	
	String file = ElementParameterParser.getValue(node, "__FILE__");
	Boolean print = new Boolean(ElementParameterParser.getValue(node, "__PRINT__"));
	String differMessage = ElementParameterParser.getValue(node, "__DIFFER_MESSAGE__");
	String noDifferMessage = ElementParameterParser.getValue(node, "__NO_DIFFER_MESSAGE__");
	String fileRef = ElementParameterParser.getValue(node, "__FILE_REF__");
	String cmpMode = ElementParameterParser.getValue(node, "__COMPARISON_MODE__");
	String encoding = ElementParameterParser.getValue(node,"__ENCODING__");

	String hadoopVersion = ElementParameterParser.getValue(node, "__DB_VERSION__");
	String fsDefalutName = "fs.default.name";
	if(hadoopVersion!=null && "Cloudera_CDH4".equals(hadoopVersion)){
		fsDefalutName="fs.defaultFS";
	}
	%>
	String username_<%=cid%> = "";
	org.apache.hadoop.fs.FileSystem fs_<%=cid%> = null;
	<%   
	if(!useExistingConnection) { // if we don't use an existing connection, we create a new hadoop configuration
		boolean useKrb = "true".equals(ElementParameterParser.getValue(node, "__USE_KRB__"));
		String kerberosPrincipal = ElementParameterParser.getValue(node, "__NAMENODE_PRINCIPAL__");
		%>
		org.apache.hadoop.conf.Configuration conf_<%=cid%> = new org.apache.hadoop.conf.Configuration();
		conf_<%=cid%>.set("<%=fsDefalutName%>", <%=fsDefaultName%>);
		<%
		if(hadoopProps.size() > 0){
			for(Map<String, String> item : hadoopProps){
			%>
				conf_<%=cid%>.set(<%=item.get("PROPERTY") %> ,<%=item.get("VALUE") %>);
			<% 
			} 
		}
		if(!((("HDP_1_0").equals(hadoopVersion) || ("HDP_1_2").equals(hadoopVersion) || ("APACHE_1_0_0").equals(hadoopVersion) || ("Cloudera_CDH4").equals(hadoopVersion)) && useKrb)) {
			user = ElementParameterParser.getValue(node, "__USERNAME__");
		} else {
%>
			conf_<%=cid%>.set("dfs.namenode.kerberos.principal", <%=kerberosPrincipal%>);
<%
		}
		if(("APACHE_0_20_2").equals(hadoopVersion) || ("MapR").equals(hadoopVersion)){
			String group = ElementParameterParser.getValue(node, "__GROUP__");
			%>
			conf_<%=cid%>.set("hadoop.job.ugi",<%=user%>+","+<%=group%>);
			fs_<%=cid%> = org.apache.hadoop.fs.FileSystem.get(conf_<%=cid%>);
		<%
		}else{
		%>
			username_<%=cid%> = <%=user%>;
			if(username_<%=cid%> == null || "".equals(username_<%=cid%>)){
				fs_<%=cid%> = org.apache.hadoop.fs.FileSystem.get(conf_<%=cid%>);
			}else{
				fs_<%=cid%> = org.apache.hadoop.fs.FileSystem.get(new java.net.URI(conf_<%=cid%>.get("<%=fsDefalutName%>")),conf_<%=cid%>,username_<%=cid%>);
			}	
		<%
		}
		
	} else { // We re use the existing connection, coming from the component learned.
		String connectionSid = ElementParameterParser.getValue(node, "__CONNECTION__");
		%>
		org.apache.hadoop.conf.Configuration conf_<%=cid%> = (org.apache.hadoop.conf.Configuration)globalMap.get("conn_<%=connectionSid%>");
		<%
		List<? extends INode> nodes = node.getProcess().getGeneratingNodes();
	    for(INode targetNode : nodes){
	    	if (targetNode.getUniqueName().equals(connectionSid)) {
	    	
			boolean useKrb = "true".equals(ElementParameterParser.getValue(targetNode, "__USE_KRB__"));
			String kerberosPrincipal = ElementParameterParser.getValue(targetNode, "__NAMENODE_PRINCIPAL__");
		      	if(("APACHE_0_20_2").equals(hadoopVersion) || ("MapR").equals(hadoopVersion)){
			    %>
			    	fs_<%=cid%> = org.apache.hadoop.fs.FileSystem.get(conf_<%=cid%>);
				<%
			  	}else{
					if(!((("HDP_1_0").equals(hadoopVersion) || ("HDP_1_2").equals(hadoopVersion) || ("APACHE_1_0_0").equals(hadoopVersion) || ("Cloudera_CDH4").equals(hadoopVersion)) && useKrb)) {
						user = ElementParameterParser.getValue(targetNode, "__USERNAME__");
					} else {
%>
						conf_<%=cid%>.set("dfs.namenode.kerberos.principal", <%=kerberosPrincipal%>);
<%
					}
			  	%>
					username_<%=cid%> = <%=user%>;
					if(username_<%=cid%> == null || "".equals(username_<%=cid%>)){
						fs_<%=cid%> = org.apache.hadoop.fs.FileSystem.get(conf_<%=cid%>);
					}else{
						fs_<%=cid%> = org.apache.hadoop.fs.FileSystem.get(new java.net.URI(conf_<%=cid%>.get("<%=fsDefalutName%>")),conf_<%=cid%>,username_<%=cid%>);
					}			  		
			  	<%
			  	}
		      	break;
		    }
	    }
	}
	%>

	boolean result_<%=cid%> = true;
	
	org.apache.hadoop.fs.Path path_<%=cid%> = new org.apache.hadoop.fs.Path(<%=file%>);
	org.apache.hadoop.fs.Path ref_path_<%=cid%> = new org.apache.hadoop.fs.Path(<%=fileRef%>);
	
	<%
	if(!("TEXT_CMP").equals(cmpMode))
	{%>
	long fileLength_<%=cid%> = fs_<%=cid%>.getFileStatus(path_<%=cid%>).getLen();
	long fileRefLength_<%=cid%> = fs_<%=cid%>.getFileStatus(ref_path_<%=cid%>).getLen();
	if(fileLength_<%=cid%> != fileRefLength_<%=cid%>)
	{
		result_<%=cid%> = false;
	}
	<%}%>
	if (result_<%=cid%>)
	{
		org.apache.hadoop.fs.FSDataInputStream file_is_<%=cid%> = fs_<%=cid%>.open(path_<%=cid%>);
		org.apache.hadoop.fs.FSDataInputStream file_ref_is_<%=cid%> = fs_<%=cid%>.open(ref_path_<%=cid%>);
	<%
	if(("TEXT_CMP").equals(cmpMode))
	{
		%>
		java.io.BufferedReader file_<%=cid%> = new java.io.BufferedReader(new java.io.InputStreamReader(file_is_<%=cid%>,<%=encoding %>));
		java.io.BufferedReader fileRef_<%=cid%> = new java.io.BufferedReader(new java.io.InputStreamReader(file_ref_is_<%=cid%>,<%=encoding %>));
		String content_<%=cid%> = null,contentRef_<%=cid%> = null;
		while((content_<%=cid%> = file_<%=cid%>.readLine()) != null && (contentRef_<%=cid%> = fileRef_<%=cid%>.readLine()) != null)
		{
			if(content_<%=cid%>.compareTo(contentRef_<%=cid%>) != 0)
			{
				result_<%=cid%> = false;
				break;
			}
		}
		
		// Check if files has a different number of lines:
		if(content_<%=cid%> == null){
		    // This step is done in case of the while upper ignore second part:
		    contentRef_<%=cid%> = fileRef_<%=cid%>.readLine();
		}
		if(content_<%=cid%> != null || contentRef_<%=cid%> != null){
		    result_<%=cid%> = false;
		}
		
		file_<%=cid%>.close();
		fileRef_<%=cid%>.close();
		<%
	}
	else
	{
		%>
    	java.io.BufferedInputStream file_<%=cid%> = new java.io.BufferedInputStream(file_is_<%=cid%>);
    	java.io.BufferedInputStream fileRef_<%=cid%> = new java.io.BufferedInputStream(file_ref_is_<%=cid%>);
    	int content_<%=cid%> = -1,contentRef_<%=cid%> = -1;
    	while((content_<%=cid%> = file_<%=cid%>.read()) != -1 && (contentRef_<%=cid%> = fileRef_<%=cid%>.read()) != -1)
    	{
    		if(content_<%=cid%> != contentRef_<%=cid%>)
    		{
    			result_<%=cid%> = false;
    			break;
    		}
    	}
    	file_<%=cid%>.close();
    	fileRef_<%=cid%>.close();			
		<%
	}
	%>
	}

	String message<%=cid %> = "";
	if (result_<%=cid %>) {
		message<%=cid %> = <%=noDifferMessage%>;
		
	} else {
		message<%=cid %> = <%=differMessage%>;
	}
	globalMap.put("<%=cid %>_DIFFERENCE",result_<%=cid %>);

	<%
	if (print) {
	%>
    System.out.println(message<%=cid %>);
	<%
	}
	
	for (IConnection conn : node.getOutgoingConnections()) {
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	%>
	<%=conn.getName() %>.file = <%=file %>;
	<%=conn.getName() %>.file_ref = <%=fileRef %>;	
	<%=conn.getName() %>.moment = java.util.Calendar.getInstance().getTime();
	<%=conn.getName() %>.job = jobName;
	<%=conn.getName() %>.component = currentComponent;
	<%=conn.getName() %>.differ = (result_<%=cid%>)?0:1;
	<%=conn.getName() %>.message = message<%=cid %>;
	<%
		}
	}
	%>
	
