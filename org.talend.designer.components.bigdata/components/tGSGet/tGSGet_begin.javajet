<%@ jet 
imports="
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.INode
	org.talend.designer.codegen.config.CodeGeneratorArgument
	
	java.util.List
	java.util.Map
" 
%>

<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    
    String accessKey = ElementParameterParser.getValue(node, "__ACCESS_KEY__");
	String secretKey = ElementParameterParser.getValue(node, "__SECRET_KEY__");
	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
	boolean isSpecifyprojectID=("true").equals(ElementParameterParser.getValue(node,"__SPECIFY_PROJECT__"));
	String projectID=ElementParameterParser.getValue(node,"__PROJECT_ID__");
	String delimiter=ElementParameterParser.getValue(node,"__DELIMITER__");
	
	String outputsDir = ElementParameterParser.getValue(node, "__DIRECTORY__");
	List<Map<String, String>> buckets = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__BUCKETS__");
%>
	int nb_line_<%=cid%> = 0;
	org.jets3t.service.impl.rest.httpclient.GoogleStorageService service_<%=cid%> = null;
	try {
<%
	if(("true").equals(useExistingConn)) {
		String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
%>
		service_<%=cid%> = (org.jets3t.service.impl.rest.httpclient.GoogleStorageService)globalMap.get("service_<%=connection%>");
<%
	}else{
%>
		org.jets3t.service.security.GSCredentials credentials_<%=cid%> = new org.jets3t.service.security.GSCredentials(<%=accessKey%>,<%=secretKey%>);
	
		service_<%=cid%> = new org.jets3t.service.impl.rest.httpclient.GoogleStorageService(credentials_<%=cid%>);
<%		
	}
%>
		service_<%=cid%>.getAccountOwner();
<%
	boolean getList = "true".equals(ElementParameterParser.getValue(node,"__GETLIST__"));
	boolean useKeysList = "true".equals(ElementParameterParser.getValue(node,"__USE_KEYS_LIST__"));
	if(!getList){
		String objects_prefix=ElementParameterParser.getValue(node,"__OBJECTS_PREFIX__");
		List<Map<String, String>> keys = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__KEYS__");
		if(isSpecifyprojectID){
%>
		org.jets3t.service.model.GSBucket[] buckets_<%=cid%>=service_<%=cid%>.listAllBuckets(<%=projectID%>);
<%
		}else{
%>
		org.jets3t.service.model.GSBucket[] buckets_<%=cid%>=service_<%=cid%>.listAllBuckets();
<%
		}
		if(useKeysList){
%>
		java.util.Map<String,String> keys_buckets_<%=cid%> = new java.util.HashMap<String,String>();
		java.util.Map<String,String> newNames_<%=cid%> = new java.util.HashMap<String,String>();
<%
			for(Map<String, String> objKey: keys){
				String bucket_name =objKey.get("BUCKET_NAME");
				String key =objKey.get("KEY");
				String newName =objKey.get("NEW_NAME");
				if(key!=null && key.trim().length()>0){
					if(bucket_name!=null && ("\"\"".equals(bucket_name.trim()) || "\"\"".equals(bucket_name.trim()))){
						bucket_name=null;
					}
%>
			keys_buckets_<%=cid%>.put(<%=key%>,<%=bucket_name%>);
<%
					if(newName!=null && !"".equals(newName.trim()) && !"\"\"".equals(newName.trim())){
%>
			newNames_<%=cid%>.put(<%=key%>,<%=newName%>);
<%
					}else{
%>
			newNames_<%=cid%>.put(<%=key%>,<%=key%>);
<%					
					}
				}
			}
		}
%>
		for (org.jets3t.service.model.GSBucket bucket_<%=cid%> : buckets_<%=cid%>) {
			String currentBucketName_<%=cid%> = bucket_<%=cid%>.getName();
			org.jets3t.service.model.GSObject[] objects_<%=cid%> = service_<%=cid%>.listObjects(currentBucketName_<%=cid%>,
			<%if(objects_prefix!=null && objects_prefix.trim().length()>0){%><%=objects_prefix%><% }else{%> null <%}%>,
			<%if(delimiter!=null && delimiter.trim().length()>0){%><%=delimiter%><% }else{%> null <%}%>
			);
<%
	} else if(buckets.size()>0){
%>
			java.util.List<String> buckets_<%=cid%> = new java.util.ArrayList<String>();
			java.util.Map<String,String> object_prefixs_<%=cid%> = new java.util.HashMap<String,String>();
			java.util.Map<String,String> object_delimiter_<%=cid%> = new java.util.HashMap<String,String>();
<%
		for(Map<String, String> map: buckets){
			String bucket_name =map.get("BUCKET_NAME");
			String object_prefix =map.get("OBJECT_PREFIX");
			String object_delimiter =map.get("OBJECT_DELIMITER");
			if(object_prefix!=null && object_prefix.trim().length()>0){
%>
			object_prefixs_<%=cid%>.put(<%=bucket_name%>,<%=object_prefix%>);
<%
			}
			if(object_delimiter!=null && object_delimiter.trim().length()>0){
%>
			object_delimiter_<%=cid%>.put(<%=bucket_name%>,<%=object_delimiter%>);
<%
			}
%>
			buckets_<%=cid%>.add(<%=bucket_name%>);
<%
		}
%>
			for (String currentBucketName_<%=cid%> : buckets_<%=cid%>) {
				org.jets3t.service.model.GSObject[] objects_<%=cid%> = service_<%=cid%>.listObjects(currentBucketName_<%=cid%>,
				object_prefixs_<%=cid%>.get(currentBucketName_<%=cid%>),object_delimiter_<%=cid%>.get(currentBucketName_<%=cid%>));
<%
	}
	if(!getList || buckets.size()>0){
%>
				for (org.jets3t.service.model.GSObject objectSummary_<%=cid%> : objects_<%=cid%>) {
					nb_line_<%=cid%>++;
					String objkey_<%=cid%> = objectSummary_<%=cid%>.getKey();
<%
		if(!getList && useKeysList){
%>
					String keyBuckt_<%=cid%>=keys_buckets_<%=cid%>.get(objkey_<%=cid%>);
					if(!keys_buckets_<%=cid%>.containsKey(objkey_<%=cid%>) || (keyBuckt_<%=cid%>!=null && !keyBuckt_<%=cid%>.equals(currentBucketName_<%=cid%>))){
						continue;
					}
					keys_buckets_<%=cid%>.remove(keyBuckt_<%=cid%>);
					java.io.File file_<%=cid%> = new java.io.File(<%=outputsDir%>+newNames_<%=cid%>.get(objkey_<%=cid%>));
					newNames_<%=cid%>.remove(objkey_<%=cid%>);
<%
		}else{
%>
					java.io.File file_<%=cid%> = new java.io.File(<%=outputsDir%>+objkey_<%=cid%>);
<%
		}
%>
					org.jets3t.service.model.GSObject obj_<%=cid%> = service_<%=cid%>.getObject(currentBucketName_<%=cid%>, objkey_<%=cid%>);
					if(obj_<%=cid%>!=null){
						boolean isDirectory_<%=cid%>=false;
						String fileName_<%=cid%> =file_<%=cid%> .getAbsolutePath();
						fileName_<%=cid%> =fileName_<%=cid%> .replace("\\", "/");
						String createDir_<%=cid%>="";
						if(obj_<%=cid%>.isDirectoryPlaceholder()){
							createDir_<%=cid%> = fileName_<%=cid%>;
						}else{
							createDir_<%=cid%>=	fileName_<%=cid%>.substring(0,fileName_<%=cid%>.indexOf("/"));
						}
						if (!"".equals(createDir_<%=cid%>)) {
							java.io.File parentDir_<%=cid%>=new java.io.File(createDir_<%=cid%>);
							if(!parentDir_<%=cid%>.exists()){
								parentDir_<%=cid%>.mkdirs();
							}
						}
						if(!obj_<%=cid%>.isDirectoryPlaceholder()){
							java.io.File parentDir_<%=cid%>=new java.io.File(file_<%=cid%>.getParent());
							if(!parentDir_<%=cid%>.exists()){
								parentDir_<%=cid%>.mkdirs();
							}
							java.io.InputStream input_<%=cid%> = obj_<%=cid%>.getDataInputStream();
							byte bytes_<%=cid%>[] = new byte[4 * 1024];
							int len_<%=cid%> = -1;
							java.io.FileOutputStream out_<%=cid%> = new java.io.FileOutputStream(file_<%=cid%>);
	
							while ((len_<%=cid%> = input_<%=cid%>.read(bytes_<%=cid%>)) != -1) {
								out_<%=cid%>.write(bytes_<%=cid%>, 0, len_<%=cid%>);
							}
							out_<%=cid%>.flush();
							input_<%=cid%>.close(); 
							out_<%=cid%>.close(); 
						}
						obj_<%=cid%>.closeDataInputStream();
	<%
	}
%>