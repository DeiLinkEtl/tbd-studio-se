<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.designer.codegen.config.CodeGeneratorArgument

		java.util.Map
		java.util.List
	" 
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;

    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    String dbhost = ElementParameterParser.getValue(node, "__HOST__");
    String dbname = ElementParameterParser.getValue(node, "__DATABASE__");
    String dbuser = ElementParameterParser.getValue(node, "__USERNAME__");
    String dbpass = ElementParameterParser.getValue(node, "__PASSWORD__");
    boolean authentication="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__REQUIRED_AUTHENTICATION__"));
    boolean useTriggerReplicate="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__USE_TRIGGER_REPLICATE__"));
    String dbport  	= ElementParameterParser.getValue(node, "__PORT__");
    List<Map<String,String>> replicaTargetDB= (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__REPLICATE_TARGET_DB__");
    boolean useExistingConn = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
    String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
%>
	org.apache.log4j.Logger.getRootLogger().setLevel(org.apache.log4j.Level.OFF);
	org.jcouchdb.db.Server server_<%=cid%> =null;
	org.jcouchdb.db.Database db_<%=cid%> = null;
	org.jcouchdb.document.BaseDocument doc_<%=cid%>=null;
	java.util.Map map_<%=cid%>=null;
	int nb_line_<%=cid%> = 0;
<%
	if(useExistingConn){
%>
	server_<%=cid%> = (org.jcouchdb.db.Server)globalMap.get("server_<%=connection%>");
	db_<%=cid%> = (org.jcouchdb.db.Database)globalMap.get("db_<%=connection%>");
<%
	}else{
%>
		server_<%=cid%>=new org.jcouchdb.db.ServerImpl(<%=dbhost%>,<%=dbport%>);
		db_<%=cid%> = new org.jcouchdb.db.Database(server_<%=cid%>,<%=dbname%>);
<%
		if(useTriggerReplicate){
%>
		java.util.Map<String, Object> createParams_<%=cid%>=new java.util.HashMap<String,Object>();
		java.util.List<java.util.Map<String, Object>> replicates_<%=cid%> = new java.util.ArrayList<java.util.Map<String, Object>>();
		createParams_<%=cid%>.put("source",<%=dbname%>);
		org.jcouchdb.db.Response reponse_<%=cid%> = null;
<%
			for(Map<String,String> targetDB:replicaTargetDB){
				String targetDBName=targetDB.get("TARGET_DB_NAME");
				boolean isCreateTargetDB = "true".equalsIgnoreCase(targetDB.get("CREATE_TARGET"));
				boolean isContinuous = "true".equalsIgnoreCase(targetDB.get("CONTINUOUS"));
				boolean isCancel = "true".equalsIgnoreCase(targetDB.get("CANCEL_REPLICATE"));
%>

			createParams_<%=cid%>.put("target",<%=targetDBName%>);
			createParams_<%=cid%>.put("create_target",<%=isCreateTargetDB%>);
			createParams_<%=cid%>.put("continuous",<%=isContinuous%>);
			reponse_<%=cid%> = server_<%=cid%>.post("/_replicate",org.svenson.JSON.defaultJSON().forValue(createParams_<%=cid%>));
			if(!reponse_<%=cid%>.isOk()){
				System.err.println(reponse_<%=cid%>.getContentAsString());
			}
<%
				if(isContinuous && isCancel){
%>
			if(reponse_<%=cid%>.isOk()){
				java.util.HashMap<String,Object>  cancelParams_<%=cid%> = new java.util.HashMap<String,Object>();
				cancelParams_<%=cid%>.put("source",<%=dbname%>);
				cancelParams_<%=cid%>.put("target",<%=targetDBName%>);
				cancelParams_<%=cid%>.put("continuous",true);
				cancelParams_<%=cid%>.put("create_target",true);
				cancelParams_<%=cid%>.put("cancel",true);
				replicates_<%=cid%>.add(cancelParams_<%=cid%>);
			}
			
<%
				}
			}
		}
		if (authentication){
%>
    	server_<%=cid%>.setCredentials(new org.apache.http.auth.AuthScope(<%=dbname%>,<%=dbport%>),org.apache.http.auth.UsernamePasswordCredentials(<%=dbuser%>,<%=dbpass%>))
<%
		}
	}
%>
	try{