<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
		java.util.Map
	" 
%>

<% 
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
  	String cid = node.getUniqueName();

    String dbhost   = ElementParameterParser.getValue(node, "__HOST__");
    String dbname   = ElementParameterParser.getValue(node, "__DATABASE__");
    boolean authentication="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__REQUIRED_AUTHENTICATION__"));
    String dbuser   = ElementParameterParser.getValue(node, "__USERNAME__");
    String dbpass   = ElementParameterParser.getValue(node, "__PASSWORD__");
    String dbport  	= ElementParameterParser.getValue(node, "__PORT__");
    String collection=ElementParameterParser.getValue(node, "__COLLECTION__");
    boolean dropExistCollection="true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__DROP_COLLECTION_CREATE__"));
    boolean useExistingConnection = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
    
    List<Map<String, String>> mapping = (List<Map<String,String>>)ElementParameterParser.getObjectValueXML(node, "__MAPPING__");
    boolean useReplicaSet="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__USE_REPLICA_SET__"));
%>
			int nb_line_<%=cid %> = 0;
<%
    List<IMetadataTable> metadatas = node.getMetadataList();
  	if(metadatas != null && metadatas.size() > 0){
      	IMetadataTable metadata = metadatas.get(0);
      	if(metadata != null){
%>
			class DBObjectUtil_<%=cid%> {
			
				private com.mongodb.BasicDBObject object = null;
				//Put value to embedded document
				//If have no embedded document, put the value to root document
				public void put(String parentNode, String curentName, Object value) {
					if (parentNode == null || "".equals(parentNode)) {
						object.put(curentName, value);
					} else {
						String objNames[]= parentNode.split("\\.");
						com.mongodb.BasicDBObject lastNode = getParentNode(parentNode, objNames.length-1);
						lastNode.put(curentName, value);
						com.mongodb.BasicDBObject parenttNode = null;
						for (int i = objNames.length - 1; i >=0; i--) {
							parenttNode=getParentNode(parentNode, i-1);
							parenttNode.put(objNames[i], lastNode);
							lastNode=(com.mongodb.BasicDBObject)parenttNode.clone();
						}
						object=lastNode;
					}
				}
				//Get node(embedded document) by path configuration
				public com.mongodb.BasicDBObject getParentNode(String parentNode, int index) {
					com.mongodb.BasicDBObject basicDBObject = object;
					if (parentNode == null || "".equals(parentNode)) {
						return object;
					} else {
						String objNames[] = parentNode.split("\\.");
						for (int i = 0; i <= index; i++) {
							basicDBObject = (com.mongodb.BasicDBObject) basicDBObject
									.get(objNames[i]);
							if (basicDBObject == null) {
								basicDBObject = new com.mongodb.BasicDBObject();
								return basicDBObject;
							}
							if (i == index) {
								break;
							}
						}
						return basicDBObject;
					}
				}
				
				public void putkeyNode(String parentNode, String curentName, Object value){
					if (parentNode == null || "".equals(parentNode) || ".".equals(parentNode)) {
						put(parentNode, curentName, value);
					}else{
						put("", parentNode+"."+curentName, value);
					}
				}
			
				public com.mongodb.BasicDBObject getObject() {
					return this.object;
				}
				
				public void setObject(com.mongodb.BasicDBObject object){
					this.object=object;
				}
			
			}
			DBObjectUtil_<%=cid%> updateObjectUtil_<%=cid%>=new DBObjectUtil_<%=cid%>();
			DBObjectUtil_<%=cid%> queryObjectUtil_<%=cid%>=new DBObjectUtil_<%=cid%>();
			java.util.Map<String, String> pathMap_<%=cid%>=new java.util.HashMap<String, String>();
			com.mongodb.Mongo mongo_<%=cid%>=null;
			com.mongodb.DB db_<%=cid%> =null;
<%
			for (int i=0;i<mapping.size();i++) {
				String path = mapping.get(i).get("PARENT_NODE_PATH");
				if(path==null || "".equals(path)){
					path="\"\"";
				}
				String schemaColumn=mapping.get(i).get("SCHEMA_COLUMN");
%>
				pathMap_<%=cid%>.put("<%=schemaColumn%>",<%=path%>);
<%
			}
      		if (useExistingConnection){
      			String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
%>
				mongo_<%=cid%>=(com.mongodb.Mongo)globalMap.get("mongo_<%=connection%>");
				db_<%=cid%> = (com.mongodb.DB) globalMap.get("db_<%=connection%>");
<%
			}else{
%>
<%
 			List<Map<String,String>> replicaAddrs= (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__REPLICA_SET__");
   			if(useReplicaSet){
%>
				List<com.mongodb.ServerAddress> addrs_<%=cid%> = new java.util.ArrayList<com.mongodb.ServerAddress>();
<%
				for(Map<String,String> replicaAddr:replicaAddrs){
%>
				addrs_<%=cid%>.add(new com.mongodb.ServerAddress(<%=replicaAddr.get("REPLICA_HOST")%>,<%=replicaAddr.get("REPLICA_PORT")%>));
<%
				}
%>
				mongo_<%=cid%> = new com.mongodb.Mongo(addrs_<%=cid%>);
<%
			}else{
%>
				mongo_<%=cid%> = new com.mongodb.Mongo(<%=dbhost%>, <%=dbport%>);
<%
			}
%>
				resourceMap.put("mongo_<%=cid%>", mongo_<%=cid%>);
				db_<%=cid%> = mongo_<%=cid%>.getDB(<%=dbname%>);
<%
				if (authentication){
%>
    			db_<%=cid%>.authenticate(<%=dbuser%>, <%=dbpass%>.toCharArray());
<%
				}
			}
%>
<%
			if(dropExistCollection){
%>
				if(db_<%=cid%>.collectionExists(<%=collection%>)){
					db_<%=cid%>.getCollection(<%=collection%>).drop();
				}
<%
			}
%>
				com.mongodb.DBCollection coll_<%=cid%> = db_<%=cid%>.getCollection(<%=collection%>);
<%
    	}
    }
%>