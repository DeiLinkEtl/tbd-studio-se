<%@ jet 
imports="
    	org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser  
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		
		java.util.List
		java.util.Map
"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	
	String cid = node.getUniqueName();

	String dbtable = null;
	String uniqueNameConnection = null;
	INode previousNode = null;

	%>
	String select_query_<%=cid %> = null;	
	String tableName_<%=cid%> = null;
	<%
	List<IConnection> connections = (List<IConnection>) node.getIncomingConnections();
	if(connections != null && connections.size() > 0 && connections.get(0) != null) {
	    IConnection connection = connections.get(0);
	    previousNode = connection.getSource();
	    String previousComponentName = previousNode.getUniqueName();
		dbtable = connection.getName();
		uniqueNameConnection = connection.getUniqueName();
		
		%>
		select_query_<%=cid %> = (String) globalMap.get("<%=previousComponentName%>"+"QUERY"+"<%=uniqueNameConnection%>");
		
		<%
	}
	
	String differenttable = ElementParameterParser.getValue(node, "__DIFFERENT_TABLE_NAME__");
    boolean useDifferentTable = "true".equals(ElementParameterParser.getValue(node, "__USE_DIFFERENT_TABLE__"));
    
	%>
		tableName_<%=cid%> = <%=useDifferentTable? differenttable:"\""+dbtable +"\""%>;
	<%
	
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");

	List<Map<String, String>> fieldPartitions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_PARTITION__");

    String dbhost = null;
    String dbport = null;
    String dbname = null;
    String dbuser = null;
    String dbpwd = null;
    
    //hbase settings
   	String storeByHBase = null;
	String zookeeperQuorumForHBase = null;
	String zookeeperClientPortForHBase = null;
	String defineRegisterJar = null;
	List<Map<String, String>> registerJarForHBase = null;
	
    boolean useExistingConn = false;
    if(previousNode != null) {
        dbhost = ElementParameterParser.getValue(previousNode, "__HOST__");
        dbport = ElementParameterParser.getValue(previousNode, "__PORT__");
        dbname = ElementParameterParser.getValue(previousNode, "__DBNAME__");
        dbuser = ElementParameterParser.getValue(previousNode, "__USER__");
        dbpwd = ElementParameterParser.getValue(previousNode, "__PASS__");
    	useExistingConn = ("true").equals(ElementParameterParser.getValue(previousNode, "__USE_EXISTING_CONNECTION__"));
    	
    	storeByHBase = ElementParameterParser.getValue(previousNode, "__STORE_BY_HBASE__");
    	zookeeperQuorumForHBase = ElementParameterParser.getValue(previousNode, "__ZOOKEEPER_QUORUM__");
    	zookeeperClientPortForHBase = ElementParameterParser.getValue(previousNode, "__ZOOKEEPER_CLIENT_PORT__");
    	defineRegisterJar = ElementParameterParser.getValue(previousNode, "__DEFINE_REGISTER_JAR__");
    	registerJarForHBase = (List<Map<String, String>>)ElementParameterParser.getObjectValue(previousNode, "__REGISTER_JAR__");
    }
%>

java.sql.Connection conn_<%=cid%> = null;

<%
if(useExistingConn) {
    String connection = ElementParameterParser.getValue(previousNode, "__CONNECTION__");
    String conn = "conn_" + connection;
    %>
    conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
    <%
} else {
		String javaDbDriver = "org.apache.hadoop.hive.jdbc.HiveDriver";
		String connectionMode = ElementParameterParser.getValue(previousNode, "__CONNECTION_MODE__");
		String hiveVersion = ElementParameterParser.getValue(previousNode, "__HIVE_VERSION__");
		
		boolean isCustom = "CUSTOM".equals(ElementParameterParser.getValue(previousNode, "__DISTRIBUTION__"));
		
		if(!isCustom && (("HDP_1_0".equals(hiveVersion) && "STANDALONE".equals(connectionMode)) || ("HDP_1_2".equals(hiveVersion) && "STANDALONE".equals(connectionMode)) || ("APACHE_0_20_203".equals(hiveVersion) && "EMBEDDED".equals(connectionMode)) || ("MAPR1".equals(hiveVersion) && "EMBEDDED".equals(connectionMode)) || ("MapR_EMR".equals(hiveVersion) && "EMBEDDED".equals(connectionMode)) || ("Cloudera_CDH3".equals(hiveVersion) && "EMBEDDED".equals(connectionMode)))) {
%>
			if(true) {
				throw new Exception("The Hive version and the connection mode are not compatible together. Please check your component configuration.");
			}
<%
		}
		if("EMBEDDED".equals(connectionMode)) {
%>
			System.setProperty("hive.metastore.local", "false");
			System.setProperty("hive.metastore.uris", "thrift://" + <%=dbhost%> + ":" + <%=dbport%>);
			System.setProperty("hive.metastore.execute.setugi", "true");
			String url_<%=cid%> = "jdbc:hive://";
<%
		} else {
%>
			String url_<%=cid%> = "jdbc:hive://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=dbname%>;
<%
		}
%>
		String dbUser_<%=cid %> = <%=dbuser%>;
		String dbPwd_<%=cid %> = <%=dbpwd%>;    
		java.lang.Class.forName("<%=javaDbDriver %>");
		conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>, dbUser_<%=cid%>, dbPwd_<%=cid%>);
<%
}
%>

<%

if("true".equalsIgnoreCase(storeByHBase)) {%>
	java.sql.Statement statement_<%=cid%> = conn_<%=cid%>.createStatement();
	<%if(zookeeperQuorumForHBase!=null && !"".equals(zookeeperQuorumForHBase) && !"\"\"".equals(zookeeperQuorumForHBase)) {%>
		statement_<%=cid%>.execute("SET hbase.zookeeper.quorum="+<%=zookeeperQuorumForHBase%>);
	<%}%>
	
	<%if(zookeeperClientPortForHBase!=null && !"".equals(zookeeperClientPortForHBase) && !"\"\"".equals(zookeeperClientPortForHBase)) {%>
		statement_<%=cid%>.execute("SET hbase.zookeeper.property.clientPort="+<%=zookeeperClientPortForHBase%>);
	<%}%>
	
	<%if("true".equalsIgnoreCase(defineRegisterJar) && registerJarForHBase!=null && registerJarForHBase.size()>0) {
		for(Map<String, String> jar : registerJarForHBase){
			String path = jar.get("JAR_PATH");
			if(path == null || "".equals(path) || "\"\"".equals(path)) {
				continue;
			}
	%>
			statement_<%=cid%>.execute("add jar "+<%=path%>);
	<%
		}
	}%>
	statement_<%=cid%>.close();
<%
}

List<IMetadataColumn> columnList = null;

List<IMetadataTable> metadatas = node.getMetadataList();
if(metadatas !=null && metadatas.size()>0){
	IMetadataTable metadata = metadatas.get(0);
	if(metadata != null){
		columnList = metadata.getListColumns();
	}
}
%>

java.sql.Statement stmt_<%=cid %> = conn_<%=cid %>.createStatement();

	StringBuffer partitionSql = new StringBuffer();
	String startPartition = "";
	String endPartition = "";
	String bodyPartition = "";
<%
	//For Bug TDI-24105,support context variables
	if(fieldPartitions != null && !fieldPartitions.isEmpty()) {
		String columnName = null;
		String columnValue = null;
		int count = 0 ;
%>
	startPartition = " PARTITION(";
	endPartition = ")";
<%
		for(Map<String, String> line : fieldPartitions ) {// search in the configuration table
		     columnName = line.get("COLUMN_NAME");
		     columnValue = line.get("COLUMN_VALUE");  
			if (columnName!=null && !"".equals(columnName)) {
			    count++;
%>
    			bodyPartition = bodyPartition + <%=columnName%>;
<%
   				if (columnValue!=null && !"".equals(columnValue)) {
%>
   				    bodyPartition = bodyPartition + "=";
   				    bodyPartition = bodyPartition + <%=columnValue%>;
<%
				}
    			if(count < fieldPartitions.size()){
%>
			        bodyPartition = bodyPartition + ",";
<%
			    }
			}
		}
	}
%>
	partitionSql.append(startPartition).append(bodyPartition).append(endPartition);
	
<%

if(columnList != null && columnList.size()>0){
	if(("INSERT").equals(dataAction)){
%>	
	String insertQuery_<%=cid %> = "INSERT INTO TABLE "+tableName_<%=cid%> + partitionSql.toString() + " "+select_query_<%=cid %>;
	stmt_<%=cid %>.execute(insertQuery_<%=cid %>);
<%
	}else if (("OVERWRITE").equals(dataAction)){
%>
	String overwriteQuery_<%=cid %> = "INSERT OVERWRITE TABLE "+tableName_<%=cid%>+ partitionSql.toString() + " "+select_query_<%=cid %>;
	stmt_<%=cid %>.execute(overwriteQuery_<%=cid %>);

<%
	}
%>
int nb_line_overwrite_<%=cid%> = 0;
int nb_line_inserted_<%=cid%> = 0;
<%
}


// MAIN

	String incomingConnName = null;
	columnList = null;
	
	List< ? extends IConnection> conns = node.getIncomingConnections();
	if(conns!=null && conns.size()>0){
		IConnection conn = conns.get(0);
		incomingConnName = conn.getName();
	}

if(incomingConnName != null && columnList != null){
	if(("INSERT").equals(dataAction)){
	%>

System.out.println("Inserting with : \n" + insertQuery_<%=cid %> + "\n");
nb_line_inserted_<%=cid%> = stmt_<%=cid %>.executeUpdate();
System.out.println("--> " + nb_line_inserted_<%=cid%> + " rows inserted. \n");

	<%
	}else if(("OVERWRITE").equals(dataAction)){
	%>
System.out.println("Overwriting with : \n" + overwriteQuery_<%=cid %> +"\n");
nb_line_overwrite_<%=cid%> = stmt_<%=cid %>.executeUpdate();
	System.out.println("--> " + nb_line_overwrite_<%=cid%> + " rows overwrited. \n");
	<%
	}
}


// END

%>
stmt_<%=cid %>.close();

<%
if(!useExistingConn) {
    %>
    if(conn_<%=cid%> != null && !conn_<%=cid%>.isClosed()) {
        conn_<%=cid%> .close();
    }
    <%
}
%>

globalMap.put("<%=cid %>_NB_LINE_OVERWRITE",nb_line_overwrite_<%=cid%>);
globalMap.put("<%=cid %>_NB_LINE_INSERTED",nb_line_inserted_<%=cid%>);
