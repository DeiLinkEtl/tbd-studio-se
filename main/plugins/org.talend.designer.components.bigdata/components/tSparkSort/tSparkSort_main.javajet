<%@ jet
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument		
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		java.util.List
		java.util.ArrayList
		java.util.Map
		"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	String previous_node="";
	String previousOutputConnectionName = "";
	
	if(node.getIncomingConnections()!=null && node.getIncomingConnections().size()>0) {
		IConnection connection = node.getIncomingConnections().get(0);
		previous_node = connection.getSource().getUniqueName();
		previousOutputConnectionName = connection.getName();
	}
	
	String outputConnectionName = "";
	List<IConnection> outputConnections = (List<IConnection>)node.getOutgoingConnections();
	if(outputConnections!=null && outputConnections.size()>0) {
		outputConnectionName = outputConnections.get(0).getName();
	}
	
	if(!"".equals(previousOutputConnectionName) && !"".equals(outputConnectionName)) {
	
		List<Map<String, String>> criterias = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SORT_KEY__");
		
		List<IMetadataTable> metadatas = node.getMetadataList();
		
		if ((metadatas != null) && (metadatas.size() > 0)) {
			IMetadataTable metadata = metadatas.get(0);
		
		  	if (metadata!=null && outputConnectionName != null) {
			
				List<Map<String, String>> configs = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILTER_CONFIG__");
				
				List<IMetadataColumn> metaColumns = metadata.getListColumns();
				List<String> columns = new ArrayList<String>();
				for (IMetadataColumn column : metaColumns) {
					columns.add(column.getLabel());
				}
%>
			List<org.talend.spark.utils.CompareCol> comCols_<%=cid %> = new java.util.ArrayList<org.talend.spark.utils.CompareCol>();
<%
				boolean isFirst = true;
				int index = -1;
				String order = "false";
				String keys="";
				List<String> orderCols = new java.util.ArrayList<String>(); // used to avoid use the same group columns
				for(Map<String, String> map : criterias) {
					if ("ASC".equals(map.get("ORDER"))) {
						order = "true";
					} else {
						order = "false";
					}
					if (!orderCols.contains(map.get("INPUT_COLUMN"))) {
						orderCols.add(map.get("INPUT_COLUMN"));
						index = columns.indexOf(map.get("INPUT_COLUMN"));
						if (isFirst) {
							isFirst = false;
							keys = keys + index;
						} else {
							keys = keys + "," + index;
						}
%>
				comCols_<%=cid %>.add(new org.talend.spark.utils.CompareCol(<%=index %>, <%=order %>,org.talend.spark.utils.CompareType.<%=map.get("COMPARE_TYPE")%>));
<%
					}
				}
%>
				org.talend.spark.TalendPairRDD<List<Object>, List<Object>> <%=cid%>_<%=outputConnectionName%>_PairRDD = org.talend.spark.operation.Sort.run(<%=previous_node%>_<%=previousOutputConnectionName%>_RDD,comCols_<%=cid %>);
				java.util.List<Integer> keyList_<%=cid%> = new java.util.ArrayList<Integer>();
<%
				if(criterias.size() <= 0) {
%>
					if(true) {
						throw new java.lang.Exception("The component <%=cid%> must have at least one sort criteria.");
					}
<%
				} else {
%>
					keyList_<%=cid%> = java.util.Arrays.asList(<%=keys%>);
<%
				}
%>
				org.talend.spark.TalendRDD<List<Object>> <%=cid%>_<%=outputConnectionName%>_RDD = org.talend.spark.operation.RDDConverter.convert(<%=cid%>_<%=outputConnectionName%>_PairRDD.toJavaRDD(),keyList_<%=cid%>);
<%
			}
		}
	} else {
%>
		<%@ include file="@{org.talend.designer.components.bigdata}/components/tSparkConnection/sparkCheckInputAndOutputConnection.javajet"%>
<%
	} 
%>
