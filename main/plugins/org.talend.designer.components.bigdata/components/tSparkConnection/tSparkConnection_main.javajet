<%@ jet
imports="
org.talend.core.model.process.INode
org.talend.core.model.process.ElementParameterParser
org.talend.core.model.metadata.IMetadataTable
org.talend.core.model.metadata.IMetadataColumn
org.talend.core.model.process.IConnection
org.talend.core.model.process.IConnectionCategory
org.talend.designer.codegen.config.CodeGeneratorArgument
org.talend.core.model.metadata.types.JavaTypesManager
org.talend.core.model.metadata.types.JavaType
org.talend.designer.runprocess.ProcessorUtilities
org.talend.designer.runprocess.ProcessorException
java.util.List 
java.util.Map
"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();	
	String cid = node.getUniqueName();
	String processId = node.getProcess().getId();
	String sparkMode = ElementParameterParser.getValue(node, "__SPARK_MODE__");
	String sparkVersion = ElementParameterParser.getValue(node, "__SPARK_VERSION__");
	boolean isStreaming = "true".equals(ElementParameterParser.getValue(node, "__STREAMING__"));
	String batchSize = ElementParameterParser.getValue(node, "__STREAMING_BATCH_SIZE__");
	List<Map<String, String>> sparkAdvancedProperties = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SPARK_ADVANCED_PROPERTIES__");
	String sparkAppName = "\"TalendSpark_"+cid+"\"";
	
	boolean useLocalMode = "LOCAL".equals(sparkMode);
	boolean useStandaloneMode = "CLUSTER".equals(sparkMode);
	boolean useYarnClientMode = "YARN_CLIENT".equals(sparkMode);
	
%>

	org.apache.spark.SparkConf conf_<%=cid%> = new  org.apache.spark.SparkConf();
	conf_<%=cid%>.setAppName(<%=sparkAppName%>);
<%
	for(Map<String, String> property : sparkAdvancedProperties){
%>
		conf_<%=cid%>.set(<%=property.get("PROPERTY")%>, <%=property.get("VALUE")%>);
<%		
	}
	
	String master = "\"local\"";
	if(useStandaloneMode) {
		master = ElementParameterParser.getValue(node, "__SPARK_HOST__");
	}
	
	if(useYarnClientMode) {
		master = "\"yarn-client\"";
	}
%>
	conf_<%=cid%>.setMaster(<%=master%>);
<%	
	if(!useLocalMode) { // If the spark mode is not local.
		if(useStandaloneMode) {
			String sparkHome = ElementParameterParser.getValue(node, "__SPARK_HOME__");
%>
			conf_<%=cid%>.setSparkHome(<%=sparkHome%>);
<%
		}
		String[] commandLine = new String[] {"<command>"};
		try {
			commandLine = ProcessorUtilities.getCommandLine("win32",true, processId, "",org.talend.designer.runprocess.IProcessor.NO_STATISTICS,org.talend.designer.runprocess.IProcessor.NO_TRACES, new String[]{});
		} catch (ProcessorException e) {
			e.printStackTrace();
		}
		
		java.util.List<String> jars = null;
		for (int i = 0; i < commandLine.length; i++) {
			if(commandLine[i].contains("jar")) {
				jars = java.util.Arrays.asList(commandLine[i].split(";"));
				break;
			}
		}
%>
		class GetJarsToRegister_<%=cid%> {
			private String oozieClasspathLine;
			private boolean isOozieRuntime;
				
			public GetJarsToRegister_<%=cid%>() {
				try {
					this.isOozieRuntime = setJarsToRegister("../../job.xml");
				} catch (java.lang.Exception e) {
					e.printStackTrace();
				}
			}
		
			public boolean setJarsToRegister(String filename) throws IOException, org.dom4j.DocumentException {
				String jobXmlPath = new java.io.File(filename).getCanonicalPath();
				if(isNeedAddLibsPath(jobXmlPath)) {
					
					org.dom4j.io.SAXReader reader_oozie = new org.dom4j.io.SAXReader();
					org.dom4j.Document document_oozie = reader_oozie.read(jobXmlPath);
					List list_oozie = document_oozie.selectNodes("/configuration/property");
					for (java.util.Iterator iter_oozie = list_oozie.iterator(); iter_oozie.hasNext();) {
						org.dom4j.Element element_oozie = (org.dom4j.Element) iter_oozie.next();
						String name_oozie = element_oozie.elementText("name");
						if(name_oozie.equals("mapred.cache.localFiles")) {
							this.oozieClasspathLine = element_oozie.elementText("value");
							return true;
						}
					}
				}
				return false;
			}
			
			public String replaceJarPaths(String originalClassPathLine) throws Exception {
				String classPathLine = "";
				String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
				
				if (isNeedAddLibsPath(crcMapPath)) {
					java.util.Map<String, String> crcMap = null;
					java.io.ObjectInputStream ois = new ObjectInputStream(new java.io.FileInputStream(crcMapPath));
					crcMap = (java.util.Map<String, String>) ois.readObject();
					ois.close();
					classPathLine = addLibsPath(originalClassPathLine, crcMap);
				} else if(this.isOozieRuntime) {
					if(this.oozieClasspathLine!=null) {
						List<String> oozieJars = java.util.Arrays.asList(this.oozieClasspathLine.split(","));
						for(int j=0; j<oozieJars.size(); j++) {
							if(oozieJars.get(j).contains(originalClassPathLine.substring(originalClassPathLine.lastIndexOf("/")))) {
								classPathLine = oozieJars.get(j);
								break;
							}
						}
					}
				} else {
					classPathLine = originalClassPathLine;
				}
				return classPathLine;
			}
		
			private boolean isNeedAddLibsPath(String crcMapPath) {
				if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
					return false;
				}
				return true;
			}
		
		
			private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
				for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
					line = adaptLibPaths(line, entry);
				}
				return line;
			}
		
			private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
				String jarName = entry.getValue();
				String crc = entry.getKey();
				String libStringFinder = "../lib/" + jarName;
				if (line.contains(libStringFinder)) {
					line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
				} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
					line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
				} else if (line.contains(";" + jarName + ";")) {
					line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
				}
				return line;
			}
		}
			
		GetJarsToRegister_<%=cid%> getJarsToRegister_<%=cid %> = new GetJarsToRegister_<%=cid%>();
		conf_<%=cid%>.setJars(new String[]{
<%
		boolean isFirst = true;
		for(int j=0; j<jars.size(); j++) {
			if(jars.get(j).contains("talend-spark")) {
				if(!isFirst) {
%>
					,
<%
				}
%>
				"file://" + getJarsToRegister_<%=cid %>.replaceJarPaths("<%=jars.get(j)%>")
<%
				isFirst = false;
			}
		}
%>
		});
<%
	} // End of: If the spark mode is not local.
	
	if(isStreaming) {
%>
		org.apache.spark.streaming.api.java.JavaStreamingContext ctx_<%=cid%> = new org.apache.spark.streaming.api.java.JavaStreamingContext(conf_<%=cid%>, new org.apache.spark.streaming.Duration(<%=batchSize%>));
<% 
	} else {
%>
		org.apache.spark.api.java.JavaSparkContext ctx_<%=cid%> = new org.apache.spark.api.java.JavaSparkContext(conf_<%=cid%>);
<%	
	}
%>
	globalMap.put("<%=cid %>_SPARK_CONTEXT", ctx_<%=cid%>);