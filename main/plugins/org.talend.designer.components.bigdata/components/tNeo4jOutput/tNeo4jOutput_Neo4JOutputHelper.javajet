<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
    	java.util.Map
    	java.util.ArrayList
    	java.util.HashSet
    	java.util.Arrays
    	java.util.Set
	"
%>
<%
class Neo4JOutputHelper {
    private INode node;
    private String cid;
    private String dbConnection;
    private String dbVersion;

    public Neo4JOutputHelper(INode node, String cid, String dbConnection, String dbVersion) {
        this.node = node;
        this.cid = cid;
        this.dbConnection = dbConnection;
        this.dbVersion = dbVersion;
    }

    private void writeBatchModeVersion1_9(Set<String> indexNames, List<String> autoIndexedColumns) {
        %>
        if (databaseService_<%=cid%> instanceof org.neo4j.kernel.EmbeddedGraphDatabase) {
            org.neo4j.kernel.EmbeddedGraphDatabase db_<%=cid%> = (org.neo4j.kernel.EmbeddedGraphDatabase) databaseService_<%=cid%>;
            storeDir_<%=cid%> = db_<%=cid%>.getStoreDir();
            db_<%=cid%>.shutdown();
            inserter_<%=cid%> = org.neo4j.unsafe.batchinsert.BatchInserters.inserter(db_<%=cid%>.getStoreDir(), importProperties_<%=cid%>);
        } else {
            throw new UnsupportedOperationException("Batch import is not supported with database server edition");
        }
        indexProvider_<%=cid%> = new org.neo4j.index.lucene.unsafe.batchinsert.LuceneBatchInserterIndexProvider(inserter_<%=cid%>);
        resourceMap.put("inserter_<%=cid%>", inserter_<%=cid%>);
        resourceMap.put("indexProvider_<%=cid%>", indexProvider_<%=cid%>);
        java.util.Map<String, org.neo4j.unsafe.batchinsert.BatchInserterIndex> indexInserterMap_<%=cid%> = new java.util.HashMap<String, org.neo4j.unsafe.batchinsert.BatchInserterIndex>();
        <%
        for (String indexName : indexNames) {
            %>
            indexInserterMap_<%=cid%>.put(<%=indexName%>, indexProvider_<%=cid%>.nodeIndex(<%=indexName%>, org.neo4j.helpers.collection.MapUtil.stringMap("type", "exact")));
            <%
        }

        // Auto index configuration
        if (autoIndexedColumns.size() > 0) {
            %>
            org.neo4j.graphdb.index.AutoIndexer<org.neo4j.graphdb.Node> autoIndexer_<%=cid%> = databaseService_<%=cid%>.index().getNodeAutoIndexer();
            autoIndexer_<%=cid%>.setEnabled(true);
            <%
        }
        for (String autoIndexedColumn : autoIndexedColumns) {
            %>
            autoIndexer_<%=cid%>.startAutoIndexingProperty("<%=autoIndexedColumn%>");
            <%
        }
        %>
        // start a transaction
        org.neo4j.graphdb.Transaction tx_<%=cid%> = databaseService_<%=cid%>.beginTx();
        <%

    }

    private void writeBatchModeVersion2_1(Set<String> indexNames, List<String> autoIndexedColumns) {
        %>
        if (databaseService_<%=cid%> instanceof org.neo4j.kernel.EmbeddedGraphDatabase) {
            if (!globalMap.containsKey("<%=dbConnection%>_inserter")) {
                org.neo4j.kernel.EmbeddedGraphDatabase db_<%=cid%> = (org.neo4j.kernel.EmbeddedGraphDatabase) databaseService_<%=cid%>;
                storeDir_<%=cid%> = db_<%=cid%>.getStoreDir();
                db_<%=cid%>.shutdown();
                inserter_<%=cid%> = org.neo4j.unsafe.batchinsert.BatchInserters.inserter(db_<%=cid%>.getStoreDir(), importProperties_<%=cid%>);
                globalMap.put("<%=dbConnection%>_inserter", inserter_<%=cid%>);
                globalMap.put("<%=dbConnection%>_is_temporary_shutted_down", true);
            } else {
               inserter_<%=cid%> = (org.neo4j.unsafe.batchinsert.BatchInserter) globalMap.get("<%=dbConnection%>_inserter");
            }
        } else {
            throw new UnsupportedOperationException("Batch import is not supported with database server edition");
        }

        if (!globalMap.containsKey("<%=dbConnection%>_indexprovider")) {
            indexProvider_<%=cid%> = new org.neo4j.index.lucene.unsafe.batchinsert.LuceneBatchInserterIndexProvider(inserter_<%=cid%>);
            globalMap.put("<%=dbConnection%>_indexprovider", indexProvider_<%=cid%>);
        } else {
            indexProvider_<%=cid%> = (org.neo4j.unsafe.batchinsert.BatchInserterIndexProvider) globalMap.get("<%=dbConnection%>_indexprovider");
        }
        resourceMap.put("inserter_<%=cid%>", inserter_<%=cid%>);
        resourceMap.put("indexProvider_<%=cid%>", indexProvider_<%=cid%>);
        java.util.Map<String, org.neo4j.unsafe.batchinsert.BatchInserterIndex> indexInserterMap_<%=cid%> = new java.util.HashMap<String, org.neo4j.unsafe.batchinsert.BatchInserterIndex>();

        <%
        for (String indexName : indexNames) {
            %>
            indexInserterMap_<%=cid%>.put(<%=indexName%>, indexProvider_<%=cid%>.nodeIndex(<%=indexName%>, org.neo4j.helpers.collection.MapUtil.stringMap("type", "exact")));
            <%
        }

        // There is no autoindex in batch mode, so we did it by hand.
        if (autoIndexedColumns.size() > 0) {
            %>
            org.neo4j.unsafe.batchinsert.BatchInserterIndex autoindex_<%=cid%> = indexProvider_<%=cid%>.nodeIndex("node_auto_index", org.neo4j.helpers.collection.MapUtil.stringMap("type", "exact"));
            long autoindex_id_<%=cid%>  = inserter_<%=cid%>.createNode(null);
            java.util.Map<String, Object> autoindex_props_<%=cid%> = new java.util.HashMap<String, Object>();
            <%
        }
    }

    private void writeBatchMode(Set<String> indexNames, List<String> autoIndexedColumns) {
        String nodeMappedMemory = ElementParameterParser.getValue(node, "__NODE_MAPPED_MEMORY__");
        String relationshipMappedMemory = ElementParameterParser.getValue(node, "__RELATIONSHIP_MAPPED_MEMORY__");
        String propertyMappedMemory = ElementParameterParser.getValue(node, "__PROPERTY_MAPPED_MEMORY__");
        String stringsMappedMemory = ElementParameterParser.getValue(node, "__STRINGS_MAPPED_MEMORY__");
        String arraysMappedMemory = ElementParameterParser.getValue(node, "__ARRAYS_MAPPED_MEMORY__");
        %>
        java.util.Map<String, String> importProperties_<%=cid%> = new java.util.HashMap<String, String>();
        importProperties_<%=cid%>.put("neostore.nodestore.db.mapped_memory", <%=nodeMappedMemory%>);
        importProperties_<%=cid%>.put("neostore.relationshipstore.db.mapped_memory", <%=relationshipMappedMemory%>);
        importProperties_<%=cid%>.put("neostore.propertystore.db.mapped_memory", <%=propertyMappedMemory%>);
        importProperties_<%=cid%>.put("neostore.propertystore.db.strings.mapped_memory", <%=stringsMappedMemory%>);
        importProperties_<%=cid%>.put("neostore.propertystore.db.arrays.mapped_memory", <%=arraysMappedMemory%>);
        String storeDir_<%=cid%> = "";
        org.neo4j.unsafe.batchinsert.BatchInserter inserter_<%=cid%> = null;
        org.neo4j.unsafe.batchinsert.BatchInserterIndexProvider indexProvider_<%=cid%> = null;

        <%
        if ("NEO4J_1_X_X".equals(dbVersion)) {
            writeBatchModeVersion1_9(indexNames, autoIndexedColumns);
        } else { // NEO4J_2_1_X
            writeBatchModeVersion2_1(indexNames, autoIndexedColumns);
        }
    }

    private void writeNormalModeVersion1_9(Set<String> indexNames, List<String> autoIndexedColumns) {
        %>
        java.util.Map<String, org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node>> indexNodeMap_<%=cid%> = new java.util.HashMap<String,org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node>>();
        <%
        for (String indexName : indexNames) {           
            %>
            indexNodeMap_<%=cid%>.put(<%=indexName%>, databaseService_<%=cid%>.index().forNodes(<%=indexName%>));
            <%
        }

        // Auto index configuration
        if (autoIndexedColumns.size() > 0) {
            %>
            org.neo4j.graphdb.index.AutoIndexer<org.neo4j.graphdb.Node> autoIndexer_<%=cid%> = databaseService_<%=cid%>.index().getNodeAutoIndexer();
            autoIndexer_<%=cid%>.setEnabled(true);
            <%
        }
        for (String autoIndexedColumn : autoIndexedColumns) {
            %>
            autoIndexer_<%=cid%>.startAutoIndexingProperty("<%=autoIndexedColumn%>");
            <%
        }
        %>
        org.neo4j.graphdb.Transaction tx_<%=cid%> = databaseService_<%=cid%>.beginTx();
        <%
    }

    private void writeNormalModeVersion2_0(Set<String> indexNames, List<String> autoIndexedColumns, boolean remoteServer) {
        %>
        java.util.Map<String, org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node>> indexNodeMap_<%=cid%> = new java.util.HashMap<String,org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node>>();
        <%
        if (!remoteServer) {
            %>
            org.neo4j.graphdb.Transaction tx_begin_<%=cid%> = databaseService_<%=cid%>.beginTx();
            try
            {
            <%
        }
        for (String indexName : indexNames) {
            %>
            indexNodeMap_<%=cid%>.put(<%=indexName%>, databaseService_<%=cid%>.index().forNodes(<%=indexName%>));
            <%
        }

        if (!remoteServer) {
            %>
            tx_begin_<%=cid%>.success();
            }
            finally
            {
                tx_begin_<%=cid%>.close();
            }
            <%
        }

        // Auto index configuration
        if (autoIndexedColumns.size() > 0) {
            %>

            org.neo4j.graphdb.index.AutoIndexer<org.neo4j.graphdb.Node> autoIndexer_<%=cid%> = databaseService_<%=cid%>.index().getNodeAutoIndexer();
            autoIndexer_<%=cid%>.setEnabled(true);
            <%
        }
        for (String autoIndexedColumn : autoIndexedColumns) {
            %>
            autoIndexer_<%=cid%>.startAutoIndexingProperty("<%=autoIndexedColumn%>");
            <%
        }

        // start a transaction
        %>
        org.neo4j.graphdb.Transaction tx_<%=cid%> = databaseService_<%=cid%>.beginTx();
        <%
    }

    private void writeNormalMode(Set<String> indexNames, List<String> autoIndexedColumns, boolean remoteServer) {
        if ("NEO4J_1_X_X".equals(dbVersion)) {
            writeNormalModeVersion1_9(indexNames, autoIndexedColumns);
        } else { // NEO4J_2_1_X
            writeNormalModeVersion2_0(indexNames, autoIndexedColumns, remoteServer);
        }
    }

}
%>
