<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection 
		org.talend.designer.codegen.config.CodeGeneratorArgument 
		org.talend.designer.neo4j.data.Neo4jData 
		org.talend.designer.neo4j.data.Index 
		org.talend.designer.neo4j.data.Relationship 
		org.talend.designer.neo4j.ui.editor.MetadataColumnExt 
		java.util.List 
	" 
%>
<%
class Neo4jBatchUtils {

	private List<IMetadataColumn> columnList;
    private String incomingConnName;
    private String cid;
    private INode node;
    private boolean useLabel;
    private String neo4jLabel;

	public Neo4jBatchUtils(String cid, INode node, String incomingConnName, List<IMetadataColumn> columnList, boolean useLabel, String neo4jLabel) {
	    this.cid = cid;
		this.incomingConnName = incomingConnName;
		this.columnList = columnList;
		this.node = node;
        this.useLabel = useLabel;
        this.neo4jLabel = neo4jLabel;
	}

	public void generateNodeBatchInsert() {
		%>
		java.util.Map<String, Object> properties_<%=cid%> = new java.util.HashMap<String, Object>();
		<%
		for (IMetadataColumn column : columnList) {		
    		putBatchPropertyInsertInMap(column);
	    }
	    // Must compute all properties before node creation for best performances
	    generateNode();
	    for (IMetadataColumn column : columnList) {
	    	if (column instanceof MetadataColumnExt) {
	    		MetadataColumnExt columnExt = (MetadataColumnExt) column;
	    		Neo4jData data = columnExt.getData();
                if (data.isAutoIndexed()) {
                    %>
                    autoindex_props_<%=cid%>.put("<%=column.getLabel()%>", <%=incomingConnName%>.<%=column%>);
                    autoindex_<%=cid%>.add(autoindex_id_<%=cid%>, autoindex_props_<%=cid%>);
                    autoindex_<%=cid%>.flush();
                    <%
                }
	    		for (Index index : data.getIndexes()) {
	    			generateIndexCreation(index, column);
	    		}
	    		for (Relationship relationship : data.getRelationships()) {
	    			generateRelationshipCreation(relationship, column);
	    		}
	    	}
    	}
	}

	private void putBatchPropertyInsertInMap(IMetadataColumn column) {
		if (column.getTalendType().equals("id_Date")) {
    		%>
    		if (<%=incomingConnName%>.<%=column%> != null) {
    			java.util.Date date_<%=cid%> = (java.util.Date) <%=incomingConnName%>.<%=column%>;
    			properties_<%=cid%>.put("<%=column%>", date_<%=cid%>.getTime());
    		}
    		<%
		} else {
	    	if (column.isNullable()) {
		    	%>
	    		if (<%=incomingConnName%>.<%=column%> != null) {
	    			properties_<%=cid%>.put("<%=column%>", <%=incomingConnName%>.<%=column%>);
	    		}
		    	<%
	    	} else {
		    	%>
	    		properties_<%=cid%>.put("<%=column%>", <%=incomingConnName%>.<%=column%>);
	    		<%
	    	}
	    }
	}

	private void generateNode() {
		%>
		<%
        if (useLabel) {
            %>
            org.neo4j.graphdb.Label label_<%=cid%> = org.neo4j.graphdb.DynamicLabel.label(<%=neo4jLabel%>);
            long node_<%=cid%> = inserter_<%=cid%>.createNode(properties_<%=cid%>, label_<%=cid%>);
            <%
        } else {
            %>
            long node_<%=cid%> = inserter_<%=cid%>.createNode(properties_<%=cid%>);
            <%
        }
		%>
		
		
		java.util.Map<String, Long> endNode_<%=cid%> = new java.util.HashMap<String,Long>();
		java.util.Map<String, Object> indexProperties_<%=cid%> = new java.util.HashMap<String, Object>();
		java.util.Map<String, java.util.Map<String, Object>> indexPropertiesMap_<%=cid%> = new java.util.HashMap<String, java.util.Map<String, Object>>();
		<%
	}

	private void generateIndexCreation(Index index, IMetadataColumn column) {
		boolean fromValueColumn = index.getValue() == null || index.getValue().isEmpty();
		if (fromValueColumn) {
			%>
			indexProperties_<%=cid%>.put(<%=index.getKey()%>, <%=incomingConnName%>.<%=column%>);
			<%
		} else {
			%>
			indexProperties_<%=cid%>.put(<%=index.getKey()%>, <%=index.getValue()%>);
			<%
		}
		%>
		indexPropertiesMap_<%=cid%>.put(<%=index.getName()%>, indexProperties_<%=cid%>);
		<%

		if (index.isUnique()) {
			%>
			indexInserterMap_<%=cid%>.get(<%=index.getName()%>).updateOrAdd(node_<%=cid%>, indexPropertiesMap_<%=cid%>.get(<%=index.getName()%>));
			<%
		} else {
			%>
			indexInserterMap_<%=cid%>.get(<%=index.getName()%>).add(node_<%=cid%>, indexPropertiesMap_<%=cid%>.get(<%=index.getName()%>));			
			<%
		}
	}

	private void generateRelationshipCreation(Relationship relationship, IMetadataColumn column) {
		%>
		endNode_<%=cid%>.put(<%=relationship.getIndex().getName()%>, 0L);
		<%
		if (relationship.getIndex().getValue() != null && !relationship.getIndex().getValue().isEmpty()) {
		%>
			endNode_<%=cid%>.put(<%=relationship.getIndex().getName()%>, indexInserterMap_<%=cid%>.get(<%=relationship.getIndex().getName()%>).get(<%=relationship.getIndex().getKey()%>, <%=relationship.getIndex().getValue()%>).getSingle());
		<%
		} else if (column.isNullable()) {
		%>
			if (<%=incomingConnName%>.<%=column%> != null) {
				endNode_<%=cid%>.put(<%=relationship.getIndex().getName()%>, indexInserterMap_<%=cid%>.get(<%=relationship.getIndex().getName()%>).get(<%=relationship.getIndex().getKey()%>, <%=incomingConnName%>.<%=column%>).getSingle());
			}
		<%
		} else {
			%>
			endNode_<%=cid%>.put(<%=relationship.getIndex().getName()%>, indexInserterMap_<%=cid%>.get(<%=relationship.getIndex().getName()%>).get(<%=relationship.getIndex().getKey()%>, <%=incomingConnName%>.<%=column%>).getSingle());
			<%
		}
		switch (relationship.getDirection()) {
			case OUTGOING :
				%>
				inserter_<%=cid%>.createRelationship(node_<%=cid%>, endNode_<%=cid%>.get(<%=relationship.getIndex().getName()%>), org.neo4j.graphdb.DynamicRelationshipType.withName(<%=relationship.getType()%>), null);
				<%
				break;
			case INCOMING :
				%>
				inserter_<%=cid%>.createRelationship(endNode_<%=cid%>.get(<%=relationship.getIndex().getName()%>), node_<%=cid%>, org.neo4j.graphdb.DynamicRelationshipType.withName(<%=relationship.getType()%>), null);
				<%
				break;
		}
	}
}
%>