<%@ jet
	imports="
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.metadata.IMetadataTable
		java.util.List
"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
	String dataNode = ElementParameterParser.getValue(node,"__DATA_NODE__");
	String queryNode = ElementParameterParser.getValue(node,"__QUERY_NODE__");
	boolean dieOnError = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
    String dbversion = ElementParameterParser.getValue(node, "__DB_VERSION__");
    
    List<IMetadataTable> metadatas = node.getMetadataList();
  	if(metadatas != null && metadatas.size() > 0){
      	IMetadataTable metadata = metadatas.get(0);
      	if(metadata != null){
		%>
			com.mongodb.WriteResult resultMessage_<%=cid%>=null;
			<%
			if(isLog4jEnabled){
			%>
				log.info("<%=cid%> - Trying to parse a json string.");
				log.debug("<%=cid%> - The JSON string:"+json_<%=cid%>.toString());
			<%
			}
			%>
            Object data_<%=cid%> = com.mongodb.util.JSON.parse(json_<%=cid%>.toString());
			<%
			if(isLog4jEnabled){
			%>
				log.info("<%=cid%> - Parsed Successfully.");
			<%
			}
			%>
			Object queryObj_<%=cid%>=null;
			if(data_<%=cid%>!=null){
				<%
				if("Insert".equalsIgnoreCase(dataAction)){
				%>
					resultMessage_<%=cid%>=coll_<%=cid%>.insert((com.mongodb.DBObject)data_<%=cid%>);
				<%
				}else if("DELETE".equalsIgnoreCase(dataAction)){
				%>
					resultMessage_<%=cid%>=coll_<%=cid%>.remove((com.mongodb.DBObject)data_<%=cid%>);
				<%
				}else{
				%>
				    // Construct the DBObject of the query node
				    queryObj_<%=cid%> = new com.mongodb.BasicDBObject(
                            ((com.mongodb.DBObject) data_<%=cid%>).toMap());
                    if (((com.mongodb.DBObject)queryObj_<%=cid%>).containsField("rootTag")) {
                        queryObj_<%=cid%> = ((com.mongodb.DBObject)queryObj_<%=cid%>).get("rootTag");
                    }

                    com.mongodb.DBObject currentDBObject = (com.mongodb.DBObject) queryObj_<%=cid%>;
                    for (String path: <%=queryNode%>.split("\\.")) {
                        List<String> toRemove = new java.util.ArrayList<String>();
                        for (String key: currentDBObject.keySet()) {
                            if (!key.equals(path)) {
                                toRemove.add(key);
                            }
                        }
                        for (String key: toRemove) {
                            currentDBObject.removeField(key);
                        }
                        currentDBObject = (com.mongodb.DBObject)currentDBObject.get(path);
                    }


                    // Construct the DBObject of the data node
                    Object data_<%=cid%>_dupplicate = com.mongodb.util.JSON.parse(json_<%=cid%>.toString());
                    Object datapath_<%=cid%> = new com.mongodb.BasicDBObject(
                            ((com.mongodb.DBObject) data_<%=cid%>_dupplicate).toMap());
                    if (((com.mongodb.DBObject)datapath_<%=cid%>).containsField("rootTag")) {
                        datapath_<%=cid%> = ((com.mongodb.DBObject)datapath_<%=cid%>).get("rootTag");
                    }

                    currentDBObject = (com.mongodb.DBObject) datapath_<%=cid%>;
                    for (String path: <%=dataNode%>.split("\\.")) {
                        List<String> toRemove = new java.util.ArrayList<String>();
                        for (String key: currentDBObject.keySet()) {
                            if (!key.equals(path)) {
                                toRemove.add(key);
                            }
                        }
                        for (String key: toRemove) {
                            currentDBObject.removeField(key);
                        }
                        currentDBObject = (com.mongodb.DBObject)currentDBObject.get(path);
                    }

					if(datapath_<%=cid%>!=null && queryObj_<%=cid%>!=null){
						<%
						if("UPDATE".equalsIgnoreCase(dataAction)){	
						%>	
							resultMessage_<%=cid%>=coll_<%=cid%>.update((com.mongodb.DBObject)queryObj_<%=cid%>,((com.mongodb.DBObject)datapath_<%=cid%>));
						<%
						}else if("UPSERT".equalsIgnoreCase(dataAction)){
						%>	
							resultMessage_<%=cid%>=coll_<%=cid%>.update((com.mongodb.DBObject)queryObj_<%=cid%>,(com.mongodb.DBObject)datapath_<%=cid%>,true,false);
						<%
						}
						%>	
					}else{
						<%
						if(dieOnError){
						%>
							throw new Exception("Data node or Query node configuration error! ");
						<%
						}else{
							if(isLog4jEnabled){
							%>
								log.error("<%=cid%> - Data node or Query node configuration error!");
							<%
							}
							%>
							System.err.println("Data node or Query node configuration error!");
						<%
						}
						%>	
					}
				<%
				}
				
                if (!dbversion.equals("MONGODB_2_6_X")) {
                %>
    				if(resultMessage_<%=cid%>!=null && resultMessage_<%=cid%>.getError()!=null){
    					<%
    					if(dieOnError){
    					%>
    						throw new Exception(resultMessage_<%=cid%>.getError());
    					<%
    					}else{
    						if(isLog4jEnabled){
    						%>
    							log.error("<%=cid%> - " + resultMessage_<%=cid%>.getError());
    						<%
    						}
    						%>
    						System.err.println(resultMessage_<%=cid%>.getError());
    					<%
    					}
    					%>
    				}
    				<%
                }
    			%>
			}else{
				<%
				if(dieOnError){
				%>
					throw new Exception("There no data in json,Please check the json configuration");
				<%
				}else{
					if(isLog4jEnabled){
					%>
					log.error("<%=cid%> - There no data in json,Please check the json configuration");
					<%
					}
					%>
					System.err.println("There no data in json,Please check the json configuration");
				<%
				}
				%>	
			}		
		<%
		}
	}
	%>