<%@ jet
    imports="
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    java.util.HashMap
"
%>
<%@ include file="@{org.talend.designer.components.bigdata}/components/tKafkaInput/tKafkaInput_util.javajet"%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

TKafkaInputUtil tKafkaInputUtil = new TKafkaInputUtil(node);

// Stopping conditions for the loop.
if (tKafkaInputUtil.isStopOnMaxSize()) {
    %>
    // Stop reading if the maximum number of input messages has been reached.
    if (tos_count_<%=cid%> >= <%=tKafkaInputUtil.getMaxSize()%>) {
        break;
    }
    <%
}

// Close the loop scope.
%>
    } catch (kafka.consumer.ConsumerTimeoutException e) {
        <%
        if (tKafkaInputUtil.isStopOnMaxMsgWait()) {
            if (tKafkaInputUtil.isStopOnMaxDuration()) {
                // If both maxDuration and maxMsgWait, then need to check if
                // the deadline has passed.
                %>
                // Immediately stop processing messagesDeadline if the max duration deadline has passed.
                if (System.currentTimeMillis() > maxMsgWaitDeadline_<%=cid%>)
                    break;
                <%
            } else {
                // If only maxMsgWait, then the consumer timeout was directly
                // used and we can be sure that the component is finished.
                %>
                break;
                <%
                }
        }
        %>
    }
}
