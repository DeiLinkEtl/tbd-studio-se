<%@ jet
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
	    	java.util.List
	    	java.util.Map
	    	java.util.ArrayList
		"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();

	String previous_node="";
	String previousOutputConnectionName = "";
	List<String> inputColumnsName = new ArrayList<String>();
	
	if(node.getIncomingConnections()!=null && node.getIncomingConnections().size()>0) {
		IConnection connection = node.getIncomingConnections().get(0);
		previous_node = connection.getSource().getUniqueName();
		previousOutputConnectionName = connection.getName();
		for(IMetadataColumn column : connection.getMetadataTable().getListColumns()) {
			inputColumnsName.add(column.getLabel());
		}
	}
	
	String outputConnectionName = null;
	List<IConnection> outputConnections = (List<IConnection>)node.getOutgoingConnections();
	if(outputConnections!=null && outputConnections.size()>0) {
		outputConnectionName = outputConnections.get(0).getName();
	}

	List<IMetadataTable> metadatas = node.getMetadataList();
	
	if ((metadatas != null) && (metadatas.size() > 0)) {
		IMetadataTable metadata = metadatas.get(0);
		if (metadata!=null && outputConnectionName != null) {
			List<IMetadataColumn> metaColumns = metadata.getListColumns();
			String columnIndexes = "";
			boolean isFirst = true;
			for (IMetadataColumn column : metaColumns) {
				if(!isFirst) {
					columnIndexes+= ",";
				}
				isFirst = false;
				columnIndexes+=inputColumnsName.indexOf(column.getLabel());
			}
%>
			org.talend.spark.TalendRDD<List<Object>> <%=cid%>_<%=outputConnectionName%>_RDD = org.talend.spark.operation.Filter.filterColumns(<%=previous_node%>_<%=previousOutputConnectionName%>_RDD, java.util.Arrays.asList(<%=columnIndexes%>));
<%
		}
	}
%>
