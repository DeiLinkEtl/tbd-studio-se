<%@ jet %>
    <%
    IMetadataTable metadata = null;
    IConnection conn = null;
    List<IMetadataColumn> columns = null;
    List<IMetadataTable> metadatas = node.getMetadataList();
    if((metadatas!=null) && (metadatas.size() > 0)){
        metadata = metadatas.get(0);
        if(metadata != null){
    		columns = metadata.getListColumns();		
    	}
    }
    List<? extends IConnection> conns = node.getIncomingConnections();
    if(conns != null && conns.size() > 0 && conns.get(0).getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
        conn = conns.get(0);
    }
    
    if(columns == null || columns.isEmpty() || conn == null){
    	return "";
    }
    %>
    <% 
    boolean useExistConn = "true".equals(ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__"));
    String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
    if(useExistConn){
    %>
        com.datastax.driver.core.Cluster cluster_<%=cid%> = (com.datastax.driver.core.Cluster)globalMap.get("cluster_<%=connection%>");
        com.datastax.driver.core.Session connection_<%=cid%> = (com.datastax.driver.core.Session)globalMap.get("connection_<%=connection%>");
    <%
    }else{  
    %>
        <%@ include file="@{org.talend.designer.components.bigdata}/components/tCassandraConnection/tCassandraConnection_datastax_connect.javajet"%>
        resourceMap.put("cluster_<%=cid%>", cluster_<%=cid%>);
        resourceMap.put("connection_<%=cid%>", connection_<%=cid%>);
    <%
    }
    String tableAction = ElementParameterParser.getValue(node, "__TABLE_ACTION__");
    %>
    <%@ include file="@{org.talend.designer.components.bigdata}/components/tCassandraOutput/CQL_Helper.javajet"%>    
    <%
    String dataAction = ElementParameterParser.getValue(node, "__DATA_ACTION__");
    CQLManager cqlManager = new CQLManager(node, columns);
    if(!"NONE".equals(tableAction) && "INSERT".equals(dataAction)){
        if("DROP_IF_EXISTS_AND_CREATE".equals(tableAction)){
        %>
            connection_<%=cid%>.execute(<%=cqlManager.getDropTableSQL()%>);
            connection_<%=cid%>.execute(<%=cqlManager.getCreateTableSQL()%>);
            <%
            if(cqlManager.containsUnsupportTypes()){
            %>
                System.err.println("Don't support create table with set/list/map");
            <%
            }
            %>
        <%    
        }else if("CREATE_IF_NOT_EXISTS".equals(tableAction)){
        %>
            connection_<%=cid%>.execute(<%=cqlManager.getCreateTableSQL()%>);
            <%
            if(cqlManager.containsUnsupportTypes()){
            %>
                System.err.println("Don't support create table with set/list/map");
            <%
            }
            %>
        <%
        }else if("CLEAR".equals(tableAction)){
        %>
            connection_<%=cid%>.execute(<%=cqlManager.getDeleteTableSQL()%>);
        <%
        }else if("TRUNCATE".equals(tableAction)){
        %>
            connection_<%=cid%>.execute(<%=cqlManager.getTruncateTableSQL()%>);
        <% 
        }
    }
    %>
	int nb_line_<%=cid%> = 0;
    com.datastax.driver.core.PreparedStatement prepareStmt_<%=cid%> = null;
    prepareStmt_<%=cid%> = connection_<%=cid%>.prepare(<%=cqlManager.generatePreActionSQL()%>);
    com.datastax.driver.core.BoundStatement boundStmt_<%=cid%> = null;
    <%
    boolean useBatch = "true".equals(ElementParameterParser.getValue(node, "__USE_UNLOGGED_BATCH__"));
    if(useBatch){
    %>
        com.datastax.driver.core.BatchStatement batchStmt_<%=cid%> = new com.datastax.driver.core.BatchStatement(com.datastax.driver.core.BatchStatement.Type.UNLOGGED);
    <%
    }else{
    %>
        boundStmt_<%=cid%> = new com.datastax.driver.core.BoundStatement(prepareStmt_<%=cid%>);
    <%
    }
    %>
    