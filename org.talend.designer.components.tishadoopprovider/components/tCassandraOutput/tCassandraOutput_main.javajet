<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		
		java.util.Map
	" 
%>
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();	
    String batchSize = ElementParameterParser.getValue(node,"__BATCH_SIZE__");
    String keyColumn = ElementParameterParser.getValue(node,"__KEY_COLUMN__");
    String columnFamily = ElementParameterParser.getValue(node,"__COLUMN_FAMILY__");
    boolean incKey = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__INC_KEY__"));
    String actionOnData = ElementParameterParser.getValue(node,"__ACTION_ON_DATA__");
	
	if (node.getIncomingConnections() != null) {
		Map<JavaType,String> typeMap=new java.util.HashMap<JavaType,String>();
		typeMap.put(JavaTypesManager.BOOLEAN,"BooleanSerializer");
		typeMap.put(JavaTypesManager.BYTE_ARRAY,"BytesArraySerializer");
		typeMap.put(JavaTypesManager.DATE,"DateSerializer");
		typeMap.put(JavaTypesManager.DOUBLE,"DoubleSerializer");
		typeMap.put(JavaTypesManager.FLOAT,"FloatSerializer");
		typeMap.put(JavaTypesManager.INTEGER,"IntegerSerializer");
		typeMap.put(JavaTypesManager.LONG,"LongSerializer");
		typeMap.put(JavaTypesManager.OBJECT,"ObjectSerializer");
		typeMap.put(JavaTypesManager.SHORT,"ShortSerializ");
		typeMap.put(JavaTypesManager.STRING,"StringSerializer");
		typeMap.put(JavaTypesManager.CHARACTER,"CharSerializer");
		for (IConnection incomingConn : node.getIncomingConnections()) {
			String conName = incomingConn.getName();
			if (incomingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				IMetadataTable inputMetadataTable = incomingConn.getMetadataTable();
%>
			String key_<%=cid%> = <%=conName%>.<%=keyColumn%> != null ? <%=conName%>.<%=keyColumn%>.toString() : null;
			if (key_<%=cid%> != null) {
<%
    			for (IMetadataColumn column : inputMetadataTable.getListColumns()) {
    				JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
    				if("UPSERT".equals(actionOnData)){
        				if (incKey || !column.getLabel().equals(keyColumn)) {
%>
							mutator_<%=cid%>.addInsertion(key_<%=cid%>, <%=columnFamily%>,
								me.prettyprint.hector.api.factory.HFactory.createColumn("<%=column.getOriginalDbColumnName()%>",<%=conName%>.<%=column.getLabel()%>,
									servializer_<%=cid%>,me.prettyprint.cassandra.serializers.<%=typeMap.get(javaType)==null?"StringSerializer":typeMap.get(javaType)%>.get()));
<%
             			}
             		}
           		}
           		if("DELETE".equals(actionOnData)){
%>
				mutator_<%=cid%>.addDeletion(key_<%=cid%>, <%=columnFamily%>);				
<%
           		}
%>
           }
		nb_line_<%=cid %>++;
		if (batchCounter_<%=cid%>++ == <%=batchSize%>) {
			mutator_<%=cid%>.execute();
			batchCounter_<%=cid%> = 0;
		}
<%
			}
      	}
    }
%>
