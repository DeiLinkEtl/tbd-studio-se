<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List 
		java.util.Map
	" 
%>
<% 
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    
	String host = ElementParameterParser.getValue(node,"__HOST__");
    String port = ElementParameterParser.getValue(node,"__PORT__");
    String cluster= ElementParameterParser.getValue(node, "__CLUSTER__");
    String userName = ElementParameterParser.getValue(node, "__USERNAME__");
    String passWord = ElementParameterParser.getValue(node, "__PASSWORD__");
	String keySpace = ElementParameterParser.getValue(node,"__KEY_SPACE__");
	boolean authentication="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__REQUIRED_AUTHENTICATION__"));
    boolean useExistingConnection = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
    String columnFamily = ElementParameterParser.getValue(node,"__COLUMN_FAMILY__");
    String keyColumn = ElementParameterParser.getValue(node,"__KEY_COLUMN__");
    boolean incKey = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__INC_KEY__"));
 	String start = ElementParameterParser.getValue(node,"__KEY_START__");
 	String end = ElementParameterParser.getValue(node,"__KEY_END__");
 	String limit = ElementParameterParser.getValue(node,"__LIMIT__");
    
    List<IMetadataTable> metadatas = node.getMetadataList();
  	List<IMetadataColumn> columnList = null;
  	List<? extends IConnection> outputs = node.getOutgoingSortedConnections();
  	String firstConnName = "";
  	if (outputs.size() > 0){
      	IConnection out = outputs.get(0);
      	firstConnName = out.getName();
    }
%>
		int nb_line_<%=cid %> = 0;
<%
  	if(metadatas != null && metadatas.size() > 0){
      	IMetadataTable metadata = metadatas.get(0);
      	if(metadata != null){
%>
		me.prettyprint.hector.api.Cluster cluster_<%=cid%> =null;
		me.prettyprint.hector.api.Keyspace keyspace_<%=cid%> =null;
<%
			if (useExistingConnection){
      			String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
%>
		cluster_<%=cid%>=(me.prettyprint.hector.api.Cluster)globalMap.get("cluster_<%=connection%>");
		keyspace_<%=cid%> = (me.prettyprint.hector.api.Keyspace) globalMap.get("keyspace_<%=connection%>");
<%
			}else{
%>
		try{
		    String hostIps_<%=cid%>=<%=host%>+":"+<%=port%>;
		    me.prettyprint.cassandra.service.CassandraHostConfigurator hosts_<%=cid%> = new me.prettyprint.cassandra.service.CassandraHostConfigurator(hostIps_<%=cid%>);
		    java.util.Map<String, String> credentials_<%=cid%> = new java.util.HashMap<String, String>();
<%
				if (authentication){
%>
		    credentials_<%=cid%>.put("username",<%=userName%>);
		    credentials_<%=cid%>.put("password",<%=passWord%>);
<%
				}
%>
	   	 	cluster_<%=cid%> = me.prettyprint.hector.api.factory.HFactory.getOrCreateCluster(<%=cluster%>,hosts_<%=cid%>,credentials_<%=cid%>);
<%
			}
%>
			me.prettyprint.cassandra.model.ConfigurableConsistencyLevel clpolicy_<%=cid%> = new me.prettyprint.cassandra.model.ConfigurableConsistencyLevel();
			me.prettyprint.hector.api.HConsistencyLevel consistencyLevel_<%=cid%> = me.prettyprint.hector.api.HConsistencyLevel.ONE;
			  clpolicy_<%=cid%>.setDefaultWriteConsistencyLevel(consistencyLevel_<%=cid%>);
		    keyspace_<%=cid%> = me.prettyprint.hector.api.factory.HFactory.createKeyspace(<%=keySpace%>, cluster_<%=cid%>,clpolicy_<%=cid%>);
		    
		    me.prettyprint.cassandra.serializers.StringSerializer serializer_<%=cid%> = me.prettyprint.cassandra.serializers.StringSerializer.get();
			me.prettyprint.hector.api.query.SliceQuery<String, String, String> sliceQuery_<%=cid%> = me.prettyprint.hector.api.factory.HFactory.createSliceQuery(
				keyspace_<%=cid%> , serializer_<%=cid%>,serializer_<%=cid%>, serializer_<%=cid%>);
			sliceQuery_<%=cid%>.setColumnFamily(<%=columnFamily%>);
			me.prettyprint.cassandra.service.KeyIterator<String> keySet_<%=cid%>=new me.prettyprint.cassandra.service.KeyIterator<String>(
				keyspace_<%=cid%>,<%=columnFamily%>,serializer_<%=cid%>,<%=start%>, <%=end%>,<%=limit%>);
			for(String iterKey_<%=cid%>:keySet_<%=cid%>){
				sliceQuery_<%=cid%>.setKey(iterKey_<%=cid%>);
				nb_line_<%=cid %>++;
<%
			StringBuilder columns=new StringBuilder();
	        columnList = metadata.getListColumns();
	        int sizeColumns = columnList.size();
	        boolean isfirstColumn=true;
			for (int i = 0; i < sizeColumns; i++) {
				IMetadataColumn column = columnList.get(i);
	        	if(!isfirstColumn){
	        		columns.append(",");
	        	}else{
	        		isfirstColumn=false;
	        	}
				columns.append("\""+column.getOriginalDbColumnName()+"\"");
             }
%>
	        sliceQuery_<%=cid%>.setColumnNames(<%=columns.toString()%>);
	        
			me.prettyprint.hector.api.query.QueryResult<me.prettyprint.hector.api.beans.ColumnSlice<String, String>> 
				result_<%=cid%> = sliceQuery_<%=cid%>.execute();
			me.prettyprint.hector.api.beans.HColumn<String,String> column_<%=cid%>=null;
			String columnValue_<%=cid%>=null;
<%
			Map<JavaType,String> typeMap=new java.util.HashMap<JavaType,String>();
			typeMap.put(JavaTypesManager.BOOLEAN,"BooleanSerializer");
			typeMap.put(JavaTypesManager.BYTE_ARRAY,"BytesArraySerializer");
			typeMap.put(JavaTypesManager.DATE,"DateSerializer");
			typeMap.put(JavaTypesManager.DOUBLE,"DoubleSerializer");
			typeMap.put(JavaTypesManager.FLOAT,"FloatSerializer");
			typeMap.put(JavaTypesManager.INTEGER,"IntegerSerializer");
			typeMap.put(JavaTypesManager.LONG,"LongSerializer");
			typeMap.put(JavaTypesManager.OBJECT,"ObjectSerializer");
			typeMap.put(JavaTypesManager.SHORT,"ShortSerializ");
			typeMap.put(JavaTypesManager.STRING,"StringSerializer");
			typeMap.put(JavaTypesManager.CHARACTER,"CharSerializer");
			for (int i = 0; i < sizeColumns; i++) {
				IMetadataColumn column = columnList.get(i);
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
				JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
				String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
				if (incKey && column.getLabel().equals(keyColumn)) {
%>
					columnValue_<%=cid%>=iterKey_<%=cid%>;
<%
				}else{
%>
				column_<%=cid%>=result_<%=cid%>.get().getColumnByName("<%=column.getOriginalDbColumnName()%>");
				columnValue_<%=cid%>=(column_<%=cid%>==null?null:column_<%=cid%>.getValue());
<%
				}
%>
				if(columnValue_<%=cid%>!=null && columnValue_<%=cid%>.length() > 0) {
<%
				if(javaType == JavaTypesManager.DATE) {
%>
					<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(
						me.prettyprint.cassandra.serializers.DateSerializer.get().fromBytes(columnValue_<%=cid%>.getBytes()), <%= patternValue %>);
<%
				} else if(javaType == JavaTypesManager.STRING){
%>
					<%=firstConnName %>.<%=column.getLabel() %> = columnValue_<%=cid%>;
<%
				} else {
%>
					<%=firstConnName %>.<%=column.getLabel() %> = me.prettyprint.cassandra.serializers.<%=typeMap.get(javaType)==null?"StringSerializer":typeMap.get(javaType)%>.get().fromBytes(columnValue_<%=cid%>.getBytes());
<%
				}
%>
				}else{
					<%=firstConnName %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
				}
<%
			}
      	}
    }
%>
    