<%@ jet 
imports="
    	org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser  
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		
		java.util.List
"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	
	String cid = node.getUniqueName();

	String dbtable = null;
	String uniqueNameConnection = null;
	INode previousNode = null;

	%>
	String select_query = null;	
	String tableName_<%=cid%> = null;
	<%
	List<IConnection> connections = (List<IConnection>) node.getIncomingConnections();
	if(connections != null && connections.size() > 0 && connections.get(0) != null) {
	    IConnection connection = connections.get(0);
	    previousNode = connection.getSource();
	    String previousComponentName = previousNode.getUniqueName();
		dbtable = connection.getName();
		uniqueNameConnection = connection.getUniqueName();
		
		%>
		select_query = (String) globalMap.get("<%=previousComponentName%>"+"QUERY"+"<%=uniqueNameConnection%>");
		
		<%
	}
	
	%>
		tableName_<%=cid%> = <%="\""+dbtable +"\""%>;
	<%
	
	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
	
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");

        String dbhost = null;
        String dbport = null;
        String dbname = null;
        String dbuser = null;
        String dbpwd = null;
	    boolean useExistingConn = false;
        if(previousNode != null) {
	        dbhost = ElementParameterParser.getValue(previousNode, "__HOST__");
	        dbport = ElementParameterParser.getValue(previousNode, "__PORT__");
	        dbname = ElementParameterParser.getValue(previousNode, "__DBNAME__");
	        dbuser = ElementParameterParser.getValue(previousNode, "__USER__");
	        dbpwd = ElementParameterParser.getValue(previousNode, "__PASS__");
	    	useExistingConn = ("true").equals(ElementParameterParser.getValue(previousNode, "__USE_EXISTING_CONNECTION__"));
        }


%>

java.sql.Connection conn_<%=cid%> = null;

<%
if(useExistingConn) {
    String connection = ElementParameterParser.getValue(previousNode, "__CONNECTION__");
    String conn = "conn_" + connection;
    %>
    conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
    <%
} else {
		String javaDbDriver = "org.apache.hadoop.hive.jdbc.HiveDriver";
		String connectionMode = ElementParameterParser.getValue(previousNode, "__CONNECTION_MODE__");
		String hiveVersion = ElementParameterParser.getValue(previousNode, "__HIVE_VERSION__");
		if(("HDP_1_0".equals(hiveVersion) && "STANDALONE".equals(connectionMode)) || ("APACHE_0_20_203".equals(hiveVersion) && "EMBEDDED".equals(connectionMode))) {
%>
			if(true) {
				throw new Exception("The Hive version and the connection mode are not compatible together. Please check your component configuration.");
			}
<%
		}
		if("EMBEDDED".equals(connectionMode)) {
%>
			System.setProperty("hive.metastore.local", "false");
			System.setProperty("hive.metastore.uris", "thrift://" + <%=dbhost%> + ":" + <%=dbport%>);
			System.setProperty("hive.metastore.execute.setugi", "true");
			String url_<%=cid%> = "jdbc:hive://";
<%
		} else {
%>
			String url_<%=cid%> = "jdbc:hive://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=dbname%>;
<%
		}
%>
		String dbUser_<%=cid %> = <%=dbuser%>;
		String dbPwd_<%=cid %> = <%=dbpwd%>;    
		java.lang.Class.forName("<%=javaDbDriver %>");
		conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>, dbUser_<%=cid%>, dbPwd_<%=cid%>);
<%
}
%>

<%
List<IMetadataColumn> columnList = null;

List<IMetadataTable> metadatas = node.getMetadataList();
if(metadatas !=null && metadatas.size()>0){
	IMetadataTable metadata = metadatas.get(0);
	if(metadata != null){
		columnList = metadata.getListColumns();
	}
}
%>

java.sql.PreparedStatement pstmt_<%=cid %> =null;
	
<%

if(columnList != null && columnList.size()>0){
	if(("INSERT").equals(dataAction)){
%>	
	String insertQuery = "INSERT INTO TABLE "+tableName_<%=cid%>+" "+select_query;
	pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insertQuery);
<%
	}else if (("OVERWRITE").equals(dataAction)){
%>
	String overwriteQuery = "INSERT OVERWRITE TABLE "+tableName_<%=cid%>+" "+select_query;
	pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(overwriteQuery);

<%
}
%>
int nb_line_<%=cid%> = 0;
int nb_line_overwrite_<%=cid%> = 0;
int nb_line_inserted_<%=cid%> = 0;
<%
}


// MAIN

	String incomingConnName = null;
	columnList = null;
	
	List< ? extends IConnection> conns = node.getIncomingConnections();
	if(conns!=null && conns.size()>0){
		IConnection conn = conns.get(0);
		incomingConnName = conn.getName();
	}
	
	metadatas = node.getMetadataList();
	
	if(metadatas != null && metadatas.size()>0){
		IMetadataTable metadata = metadatas.get(0);
		if(metadata != null){
			columnList = metadata.getListColumns();
		}
	}

if(incomingConnName != null && columnList != null){
	if(("INSERT").equals(dataAction)){
	%>

System.out.println("Inserting with : \n" + insertQuery + "\n");
nb_line_inserted_<%=cid%> = pstmt_<%=cid %>.executeUpdate();
System.out.println("--> " + nb_line_inserted_<%=cid%> + " rows inserted. \n");

	<%
	}else if(("OVERWRITE").equals(dataAction)){

	%>
System.out.println("Overwriting with : \n" + overwriteQuery +"\n");
nb_line_overwrite_<%=cid%> = pstmt_<%=cid %>.executeUpdate();
	System.out.println("--> " + nb_line_overwrite_<%=cid%> + " rows overwrited. \n");
	<%
	}
}












// END

%>

pstmt_<%=cid %>.close();

<%
if(!useExistingConn) {
    %>
    if(conn_<%=cid%> != null && !conn_<%=cid%>.isClosed()) {
        conn_<%=cid%> .close();
    }
    <%
}
%>

globalMap.put("<%=cid %>_NB_LINE",nb_line_<%=cid%>);
globalMap.put("<%=cid %>_NB_LINE_OVERWRITE",nb_line_overwrite_<%=cid%>);
globalMap.put("<%=cid %>_NB_LINE_INSERTED",nb_line_inserted_<%=cid%>);
