<%@ jet 
	imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.EConnectionType
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
	org.talend.core.model.process.IConnectionCategory
	org.talend.core.model.process.ElementParameterParser
	java.util.Map 
    java.util.List 
	"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	String rowSeparator = ElementParameterParser.getValue(node, "__ROWSEPARATOR__");
	String fieldSeparator = ElementParameterParser.getValue(node, "__FIELDSEPARATOR__");
	boolean customEncoding="true".equals( ElementParameterParser.getValue(node,"__CUSTOM_ENCODING__"));
	String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
	
	String templetonHost = ElementParameterParser.getValue(node, "__TEMPLETON_HOST__");
	String templetonPort = ElementParameterParser.getValue(node, "__TEMPLETON_PORT__");
	String database = ElementParameterParser.getValue(node, "__DATABASE_NAME__");
	String table = ElementParameterParser.getValue(node, "__TABLE_NAME__");
	String partition = ElementParameterParser.getValue(node, "__PARTITION_NAME__");
	String user = ElementParameterParser.getValue(node, "__USERNAME__");
	
	String fsDefaultName = ElementParameterParser.getValue(node, "__FS_DEFAULT_NAME__");
	List<Map<String, String>> hadoopProps = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__HADOOP_ADVANCED_PROPERTIES__");
		
	String fileName = ElementParameterParser.getValue(node, "__FILENAME__");
	
	boolean dieOnError = "true".equals(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
	boolean activateLog = "true".equals(ElementParameterParser.getValue(node, "__ACTIVATE_LOG__"));
	
	String stdout = ElementParameterParser.getValue(node, "__STDOUT__");
	String stderr = ElementParameterParser.getValue(node, "__STDERR__");
	
	List<? extends IConnection> outConns = node.getOutgoingConnections();
	IConnection outConn = null;
	IMetadataTable metadata = null;
%>	
	org.apache.cxf.jaxrs.client.WebClient client_<%=cid%> = org.apache.cxf.jaxrs.client.WebClient.create("http://" + <%=templetonHost%> + ":" + <%=templetonPort%> + "?user.name=" + <%=user%>);
	String pathEndpoint_<%=cid%> = "templeton/v1/ddl/database/" + <%=database%> + "/table/" + <%=table%> + "/partition/" + <%=partition%>;
	String location_<%=cid%> = "";
	<%@ include file="../templates/HCatalog/RestResponse.javajet"%>
<%
		ParseRestResult parserResult = new ParseRestResult();
		parserResult.declareVariable(node);
%>
	try {
		client_<%=cid%>.path(pathEndpoint_<%=cid%>);
		client_<%=cid%>.accept("application/json");
		
		javax.ws.rs.core.Response response_<%=cid%> = client_<%=cid%>.get();

<%
			parserResult.getJSONObject(node, null);
			parserResult.manageError(node, activateLog);
			parserResult.manageResponseStatus(node, null);
%>		
		Object loc_<%=cid%> = object_<%=cid%>.get("location");
		if(loc_<%=cid%>!=null) {
			location_<%=cid%> = loc_<%=cid%>.toString();
		}
	} catch (Exception e_<%=cid%>) {
<%
		if(dieOnError) {
%>
			throw e_<%=cid%>;
<%
		} else {
%>
			System.err.println(e_<%=cid%>.getMessage());
<%
		}
%>
	}
	
	if(location_<%=cid%> == null || "".equals(location_<%=cid%>) || location_<%=cid%>.length() <= 0) {
<%
		if(dieOnError) {
%>
			throw new Exception("Error during the response parsing. The Templeton server has returned a bad value or the location isn't available");
<%
		} else {
%>
			System.err.println("Error during the response parsing. The Templeton server has returned a bad value or the location isn't available");
<%
		}
%>
	}
		
	String pathHDFS_<%=cid%> = "";
	String namenode_<%=cid%> = "";
	
	if(location_<%=cid%>.contains(":")) {
		pathHDFS_<%=cid%> = "/" + (location_<%=cid%>.split(":")[2]).split("/", 2)[1];
		namenode_<%=cid%> = location_<%=cid%>.substring(0, location_<%=cid%>.length()- pathHDFS_<%=cid%>.length());
	}
<%
	
	if(outConns!=null && outConns.size()> 0) {
			outConn = outConns.get(0);
			if(outConn!=null && outConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
				metadata = outConn.getMetadataTable();
			}
	}
	
	if (metadata!=null) { 
%>
		String username_<%=cid%> = "";
		org.apache.hadoop.fs.FileSystem fs_<%=cid%> = null;
<%   
		String hadoopVersion = ElementParameterParser.getValue(node, "__DB_VERSION__");
%>
		org.apache.hadoop.conf.Configuration conf_<%=cid%> = new org.apache.hadoop.conf.Configuration();
		conf_<%=cid%>.set("fs.default.name", namenode_<%=cid%>);
<%
		if(hadoopProps.size() > 0){
			for(Map<String, String> item : hadoopProps){
%>
				conf_<%=cid%>.set(<%=item.get("PROPERTY") %> ,<%=item.get("VALUE") %>);
<% 
			} 
		}
%>
		username_<%=cid%> = <%=user%>;
		if(username_<%=cid%> == null || "".equals(username_<%=cid%>)){
			fs_<%=cid%> = org.apache.hadoop.fs.FileSystem.get(conf_<%=cid%>);
		}else{
			fs_<%=cid%> = org.apache.hadoop.fs.FileSystem.get(new java.net.URI(conf_<%=cid%>.get("fs.default.name")),conf_<%=cid%>,username_<%=cid%>);
		}	

		org.apache.hadoop.fs.FileStatus [] fileStatus_<%=cid%>= fs_<%=cid%>.listStatus(new org.apache.hadoop.fs.Path(pathHDFS_<%=cid%>));
		for(int i_<%=cid%>=0; i_<%=cid%><fileStatus_<%=cid%>.length; i_<%=cid%>++) {
			org.apache.hadoop.fs.Path path_<%=cid%> = fileStatus_<%=cid%>[i_<%=cid%>].getPath();
			org.apache.hadoop.fs.FSDataInputStream fsDataInputStream_<%=cid%> = fs_<%=cid%>.open(path_<%=cid%>);
			org.talend.fileprocess.FileInputDelimited fid_<%=cid %> = new org.talend.fileprocess.FileInputDelimited(fsDataInputStream_<%=cid%>, <%=(customEncoding?encoding:null) %>,<%=fieldSeparator %>,<%=rowSeparator %>,false,0,0,-1,-1, false);
			while (fid_<%=cid %>.nextRecord()) {
<%
	}
%>
	