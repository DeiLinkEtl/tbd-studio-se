<%@ jet
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument		
		org.talend.core.model.metadata.IMetadataTable 
	    	org.talend.core.model.metadata.IMetadataColumn
    		org.talend.core.model.metadata.types.Java2STLangTypesHelper   	
    		java.util.List
    		java.util.Map
		"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	boolean stat = codeGenArgument.isStatistics();
	
	String previous_node="";
	String start_node="";

	if(node.getIncomingConnections()!=null && node.getIncomingConnections().size()>0) {
		previous_node = node.getIncomingConnections().get(0).getSource().getUniqueName();
		start_node = node.getDesignSubjobStartNode().getUniqueName();
	}
	
	String lookup_filename = ElementParameterParser.getValue(node, "__LOOKUP_FILENAME__");
	String lookup_separator = ElementParameterParser.getValue(node, "__FIELD_SEPARATOR_CHAR_LOOKUP__");
	
	List<IMetadataColumn> lookupColumns = node.getMetadataFromConnector("LOOKUP").getListColumns();
	
	List<Map<String, String>> joinKeyColumns = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__JOIN_KEY__");
	String joinMode = ElementParameterParser.getValue(node, "__JOIN_MODE__");
	
	boolean optimize = "true".equals(ElementParameterParser.getValue(node, "__OPTIMIZE__"));
	String using = ElementParameterParser.getValue(node, "__USING__");
	
	boolean usePartition = "true".equals(ElementParameterParser.getValue(node, "__USE_PARTITION__"));
	String partition = ElementParameterParser.getValue(node, "__PARTITION__");
	
	boolean useParallel = "true".equals(ElementParameterParser.getValue(node, "__INCREASE_PARALLELISM__"));
	String reduce_number = ElementParameterParser.getValue(node, "__REDUCE_NUMBER__");
	
%>

		StringBuilder sb_<%=cid%> = new StringBuilder();		
		
		sb_<%=cid%> = new StringBuilder();
		
		sb_<%=cid%>.append("<%=cid%>_LOOKUP = load '"+<%=lookup_filename%>+"' using PigStorage('"+<%=lookup_separator%>+"')");
		String schema_<%=cid%>="";
<%
		List<IMetadataTable> metadatas = node.getMetadataList();
		IMetadataTable metadata = null;
		if(metadatas != null && metadatas.size() > 2) {
		    metadata = metadatas.get(2);
		}
		if(metadata!=null) {
			if(metadata.getListColumns() != null && metadata.getListColumns().size() > 0) {
%>
				sb_<%=cid%>.append(" AS (");
<%
				for(int i=0; i<metadata.getListColumns().size(); i++) {
%>
					sb_<%=cid%>.append("<%=i!=0?", ":""%><%=metadata.getListColumns().get(i).getLabel()%>:<%=Java2STLangTypesHelper.getPigType(metadata, metadata.getListColumns().get(i).getLabel())%>");
<%

				}
%>
				sb_<%=cid%>.append(")");
<%
			}
		}
%>
		sb_<%=cid%>.append(";");		
		pigServer_<%=start_node%>.registerQuery(sb_<%=cid%>.toString());
		
		sb_<%=cid%> = new StringBuilder();
		sb_<%=cid%>.append("<%=cid%>_JOIN_RESULT = JOIN <%=previous_node%>_RESULT BY ");
<%
		for(Map<String, String> line : joinKeyColumns){
%>
			sb_<%=cid%>.append("<%=line.get("INPUT_COLUMN")%>");
<%
			if("left-outer-join".equals(joinMode)) {
%>
				sb_<%=cid%>.append(" LEFT");
<%
			}
			if("right-outer-join".equals(joinMode)) {
%>
				sb_<%=cid%>.append(" RIGHT");
<%
			}
			if("full-outer-join".equals(joinMode)) {
%>
				sb_<%=cid%>.append(" FULL");
<%
			}
%>
			sb_<%=cid%>.append(", <%=cid%>_LOOKUP BY " + "<%=line.get("LOOKUP_COLUMN")%>");
<%
		}
		
		if(optimize) {
%>
			sb_<%=cid%>.append(" USING '<%=using%>'");
<%
		}
		
		if(usePartition && !("skewed".equals(using))) {
%>
			sb_<%=cid%>.append(" PARTITION BY "+<%=partition%>);
<%
		}
		
		if(useParallel) {
%>
			sb_<%=cid%>.append(" PARALLEL <%=reduce_number%>");
<%
		}
		
%>		
		sb_<%=cid%>.append(";");
		pigServer_<%=start_node%>.registerQuery(sb_<%=cid%>.toString());

		sb_<%=cid%> = new StringBuilder();
		sb_<%=cid%>.append("<%=cid%>_RESULT = FOREACH <%=cid%>_JOIN_RESULT GENERATE ");

<%
		if(metadatas != null && metadatas.size() > 0) {
		    metadata = metadatas.get(0);
		}
		if(metadata!=null) {
			if(metadata.getListColumns() != null && metadata.getListColumns().size() > 0) {
				for(int i=0; i<metadata.getListColumns().size(); i++) {
%>
					sb_<%=cid%>.append("<%=i!=0?", ":""%>$<%=i%> AS <%=metadata.getListColumns().get(i).getLabel()%>");
<%

				}
			}
		}
%>
		sb_<%=cid%>.append(";");
		pigServer_<%=start_node%>.registerQuery(sb_<%=cid%>.toString());
